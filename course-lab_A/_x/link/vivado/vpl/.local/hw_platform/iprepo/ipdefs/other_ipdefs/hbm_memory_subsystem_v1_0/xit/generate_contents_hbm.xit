###############################################################################
##
## (c) Copyright 2012-2013 Xilinx, Inc. All rights reserved.
##
## This file contains confidential and proprietary information
## of Xilinx, Inc. and is protected under U.S. and
## international copyright and other intellectual property
## laws.
##
## DISCLAIMER
## This disclaimer is not a license and does not grant any
## rights to the materials distroibuted herewith. Except as
## otherwise provided in a valid license issued to you by
## Xilinx, and to the maximum extent permitted by applicable
## law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
## WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
## AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
## BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
## INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
## (2) Xilinx shall not be liable (whether in contract or tort,
## including negligence, or under any other theory of
## liability) for any loss or damage of any kind or nature
## related to, arising under or in connection with these
## materials, including for any direct, or any indirect,
## special, incidental, or consequential loss or damage
## (including loss of data, profits, goodwill, or any type of
## loss or damage suffered as a result of any action brought
## by a third party) even if such damage or loss was
## reasonably foreseeable or Xilinx had been advised of the
## possibility of the same.
##
## CRITICAL APPLICATIONS
## Xilinx products are not designed or intended to be fail-
## safe, or for use in any application requiring fail-safe
## performance, such as life-support or safety devices or
## systems, Class III medical devices, nuclear facilities,
## applications related to the deployment of airbags, or any
## other applications that could lead to death, personal
## injury, or severe property or environmental damage
## (individually and collectively, "Critical
## Applications"). Customer assumes the sole risk and
## liability of any use of Xilinx products in Critical
## Applications, subject only to applicable laws and
## regulations governing limitations on product liability.
##
## THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
## PART OF THIS FILE AT ALL TIMES.
##

# ----------------------------------------------------------------------

# -----------------------
# Create HBM instance
set hbm_inst [create_bd_cell -type ip -vlnv xilinx.com:ip:hbm:1.0 hbm_inst]

# -----------------------
# Gather a whole load of properties based on configuration

set config_list []

# Get the number of stacks used - keyed off control interfaces
set num_stacks [llength [dict get $CALC CTRL_USED]]

# First enable relevant memory controllers
for {set mc 0} {$mc < [dict get $CONFIG total_hbm_num_mc]} {incr mc} {
   set param_name [format USER_MC_ENABLE_%.2d $mc]
   if {[lsearch -exact [dict get $CALC MC_USED] $param_name] > -1} {
      lappend config_list "CONFIG.$param_name {TRUE}"
   } else {
      lappend config_list "CONFIG.$param_name {FALSE}"
   }
}

# Could enable/disable bank group interleave here
# based on RAMA but would need to know transaction length
# TODO BUT UNLIKELY TO EVER HAPPEN

# Update memory density and HBM stack - keyed off control interfaces
if {$num_stacks > 1} {
   lappend config_list "CONFIG.USER_HBM_DENSITY [dict get $CONFIG hbm_dual_stack_size] CONFIG.USER_HBM_STACK {2} CONFIG.USER_SWITCH_ENABLE_01 {TRUE}"
} elseif {$num_stacks == 1} {
   lappend config_list "CONFIG.USER_HBM_DENSITY [dict get $CONFIG hbm_single_stack_size]   CONFIG.USER_HBM_STACK {1} CONFIG.USER_SWITCH_ENABLE_01 {FALSE}"
} else {
   send_msg_id {hbm_memory_subsystem 3-1} ERROR "GEN_CONTENTS::No HBM stacks used num_stacks = $num_stacks..."
}

# Update ports and clock sources
set clock_properties [list "" ""]
set clock_switch_ports [list "" ""]
for {set i 0} {$i < [dict get $CONFIG total_hbm_num_mi]} {incr i} {
   # Port enablement
   set param_name     [format USER_SAXI_%.2d $i]
   # Which clock is used for this stack?
   set stack          [expr int($i/16)]
   set clk_param_name [format USER_CLK_SEL_LIST%.1d $stack]
   set clk_name       [format AXI_%.2d_ACLK $i]
   # If enabled then enable and use this clock for stack
   if {[lsearch -exact [dict get $CALC kernel_connections all] $i] > -1} {
      lappend config_list "CONFIG.$param_name {TRUE}"
      # Assign the clock to the last one in each stack (Note: updating as we go along)
      # added to config properties later
      lset clock_properties $stack "CONFIG.$clk_param_name $clk_name"
      lset clock_switch_ports $stack $i
   } else {
      lappend config_list "CONFIG.$param_name {FALSE}"
   }
}

# Configure HBM PLL to 400MHz
if {[regexp -- .*es1.* [get_project_property PART]]} {
   if {[info exists ::env(HMSS_FORCE_ES_PART_FULL_RATE)]} {
      send_msg_id {hbm_memory_subsystem 3-1} WARNING "You are using a -es1 engineering silicon part and have forced memory performance out of specification. "
   } else {
      set hbm_400mhz_config_list [list CONFIG.USER_HBM_FBDIV_0 {32} CONFIG.USER_HBM_CP_0 {5} CONFIG.USER_HBM_HEX_CP_RES_0 {0x0000A500} CONFIG.USER_HBM_HEX_FBDIV_CLKOUTDIV_0 {0x00000802} \
                                       CONFIG.USER_HBM_TCK_0 {800} CONFIG.USER_HBM_TCK_0_PERIOD {1.25} \
                                       CONFIG.USER_tRC_0 {0x26} CONFIG.USER_tRAS_0 {0x1B} CONFIG.USER_tRCDRD_0 {0xC} CONFIG.USER_tRCDWR_0 {0x8} \
                                       CONFIG.USER_tRRDL_0 {0x4} CONFIG.USER_tRRDS_0 {0x4} CONFIG.USER_tFAW_0 {0xD} CONFIG.USER_tRP_0 {0xC} CONFIG.USER_tWR_0 {0xD} \
                                       CONFIG.USER_tWTRL_0 {0x7} CONFIG.USER_tWTRS_0 {0x3} CONFIG.USER_tXP_0 {0x6} CONFIG.USER_tRFC_0 {0xD0} CONFIG.USER_tRFCSB_0 {0x80} \
                                       CONFIG.USER_tRREFD_0 {0x7} CONFIG.USER_HBM_REF_OUT_CLK_0 {1600} CONFIG.USER_MC0_REF_CMD_PERIOD {0x0C30} CONFIG.USER_MC1_REF_CMD_PERIOD {0x0C30} \
                                       CONFIG.USER_MC2_REF_CMD_PERIOD {0x0C30} CONFIG.USER_MC3_REF_CMD_PERIOD {0x0C30} CONFIG.USER_MC4_REF_CMD_PERIOD {0x0C30} \
                                       CONFIG.USER_MC5_REF_CMD_PERIOD {0x0C30} CONFIG.USER_MC6_REF_CMD_PERIOD {0x0C30} CONFIG.USER_MC7_REF_CMD_PERIOD {0x0C30} CONFIG.USER_DFI_CLK0_FREQ {400.000}]
      lappend config_list $hbm_400mhz_config_list
      
      if {$num_stacks > 1} {
         set hbm_400mhz_config_list [list CONFIG.USER_HBM_CP_1 {5} CONFIG.USER_HBM_FBDIV_1 {32} CONFIG.USER_HBM_HEX_CP_RES_1 {0x0000A500} CONFIG.USER_HBM_HEX_FBDIV_CLKOUTDIV_1 {0x00000802} \
                                          CONFIG.USER_tRC_1 {0x26} CONFIG.USER_tRAS_1 {0x1B} CONFIG.USER_tRCDRD_1 {0xC} CONFIG.USER_tRCDWR_1 {0x8} \
                                          CONFIG.USER_tRRDL_1 {0x4} CONFIG.USER_tRRDS_1 {0x4} CONFIG.USER_tFAW_1 {0xD} CONFIG.USER_tRP_1 {0xC} CONFIG.USER_tWR_1 {0xD} \
                                          CONFIG.USER_tWTRL_1 {0x7} CONFIG.USER_tWTRS_1 {0x3} CONFIG.USER_tXP_1 {0x6} CONFIG.USER_tRFC_1 {0xD0} CONFIG.USER_tRFCSB_1 {0x80} \
                                          CONFIG.USER_tRREFD_1 {0x7} CONFIG.USER_HBM_TCK_1 {800} CONFIG.USER_HBM_TCK_1_PERIOD {1.25} CONFIG.USER_HBM_REF_OUT_CLK_1 {1600} \
                                          CONFIG.USER_MC8_REF_CMD_PERIOD {0x0C30} CONFIG.USER_MC9_REF_CMD_PERIOD {0x0C30} CONFIG.USER_MC10_REF_CMD_PERIOD {0x0C30} \
                                          CONFIG.USER_MC11_REF_CMD_PERIOD {0x0C30} CONFIG.USER_MC12_REF_CMD_PERIOD {0x0C30} CONFIG.USER_MC13_REF_CMD_PERIOD {0x0C30} \
                                          CONFIG.USER_MC14_REF_CMD_PERIOD {0x0C30} CONFIG.USER_MC15_REF_CMD_PERIOD {0x0C30} CONFIG.USER_DFI_CLK1_FREQ {400.000}]
         lappend config_list $hbm_400mhz_config_list
      }

      send_msg_id {hbm_memory_subsystem 3-1} WARNING "You are using a -es1 engineering silicon part. Memory performance is lower than production parts. "

   }
}

# Find out which clocks are used in the switch..
# Used in ES parts to connect unbuffered clock (and add clock shim)
dict set CONFIG HBM_SWITCH_CLOCKS $clock_switch_ports
dict set CONFIG HBM_NUM_STACKS $num_stacks

# Disable HMSS memory controller bank group interleaving
if [info exists ::env(HMSS_MC_DISABLE_BG_INTERLEAVE)] {
   if {$::env(HMSS_MC_DISABLE_BG_INTERLEAVE)} {
      send_msg_id {hbm_memory_subsystem 3-1} WARNING "Bank group interleave is disabled for HBM MC 0 to [dict get $CONFIG total_hbm_num_mc]. Linear access performance will degrade."
      for {set mc 0} {$mc < [dict get $CONFIG total_hbm_num_mc]} {incr mc} {
         set param_name [format USER_MC%d_BG_INTERLEAVE_EN $mc]
         lappend config_list "CONFIG.$param_name {false}"
      }
   }
}

# Ensure that temperature-compensated refresh is enabled
lappend config_list "CONFIG.USER_MC0_TEMP_CTRL_SELF_REF_INTVL {true} CONFIG.USER_MC1_TEMP_CTRL_SELF_REF_INTVL {true} CONFIG.USER_MC2_TEMP_CTRL_SELF_REF_INTVL {true} CONFIG.USER_MC3_TEMP_CTRL_SELF_REF_INTVL {true} CONFIG.USER_MC4_TEMP_CTRL_SELF_REF_INTVL {true} CONFIG.USER_MC5_TEMP_CTRL_SELF_REF_INTVL {true} CONFIG.USER_MC6_TEMP_CTRL_SELF_REF_INTVL {true} CONFIG.USER_MC7_TEMP_CTRL_SELF_REF_INTVL {true} CONFIG.USER_MC8_TEMP_CTRL_SELF_REF_INTVL {true} CONFIG.USER_MC9_TEMP_CTRL_SELF_REF_INTVL {true} CONFIG.USER_MC10_TEMP_CTRL_SELF_REF_INTVL {true} CONFIG.USER_MC11_TEMP_CTRL_SELF_REF_INTVL {true} CONFIG.USER_MC12_TEMP_CTRL_SELF_REF_INTVL {true} CONFIG.USER_MC13_TEMP_CTRL_SELF_REF_INTVL {true} CONFIG.USER_MC14_TEMP_CTRL_SELF_REF_INTVL {true} CONFIG.USER_MC15_TEMP_CTRL_SELF_REF_INTVL {true}"

# ECC handling
if [dict get $CONFIG ECC_EN] {

   # ECC Enable - global not per MC
   lappend config_list "CONFIG.USER_MC0_ENABLE_ECC_CORRECTION {true} CONFIG.USER_MC1_ENABLE_ECC_CORRECTION {true} CONFIG.USER_MC2_ENABLE_ECC_CORRECTION {true} CONFIG.USER_MC3_ENABLE_ECC_CORRECTION {true} CONFIG.USER_MC4_ENABLE_ECC_CORRECTION {true} CONFIG.USER_MC5_ENABLE_ECC_CORRECTION {true} CONFIG.USER_MC6_ENABLE_ECC_CORRECTION {true} CONFIG.USER_MC7_ENABLE_ECC_CORRECTION {true} CONFIG.USER_MC8_ENABLE_ECC_CORRECTION {true} CONFIG.USER_MC9_ENABLE_ECC_CORRECTION {true} CONFIG.USER_MC10_ENABLE_ECC_CORRECTION {true} CONFIG.USER_MC11_ENABLE_ECC_CORRECTION {true} CONFIG.USER_MC12_ENABLE_ECC_CORRECTION {true} CONFIG.USER_MC13_ENABLE_ECC_CORRECTION {true} CONFIG.USER_MC14_ENABLE_ECC_CORRECTION {true} CONFIG.USER_MC15_ENABLE_ECC_CORRECTION {true}"
   lappend config_list "CONFIG.USER_MC0_EN_DATA_MASK {false} CONFIG.USER_MC1_EN_DATA_MASK {false} CONFIG.USER_MC2_EN_DATA_MASK {false} CONFIG.USER_MC3_EN_DATA_MASK {false} CONFIG.USER_MC4_EN_DATA_MASK {false} CONFIG.USER_MC5_EN_DATA_MASK {false} CONFIG.USER_MC6_EN_DATA_MASK {false} CONFIG.USER_MC7_EN_DATA_MASK {false} CONFIG.USER_MC8_EN_DATA_MASK {false} CONFIG.USER_MC9_EN_DATA_MASK {false} CONFIG.USER_MC10_EN_DATA_MASK {false} CONFIG.USER_MC11_EN_DATA_MASK {false} CONFIG.USER_MC12_EN_DATA_MASK {false} CONFIG.USER_MC13_EN_DATA_MASK {false} CONFIG.USER_MC14_EN_DATA_MASK {false} CONFIG.USER_MC15_EN_DATA_MASK {false}"
   lappend config_list "CONFIG.USER_MC0_INITILIZE_MEM_USING_ECC_SCRUB {true} CONFIG.USER_MC1_INITILIZE_MEM_USING_ECC_SCRUB {true} CONFIG.USER_MC2_INITILIZE_MEM_USING_ECC_SCRUB {true} CONFIG.USER_MC3_INITILIZE_MEM_USING_ECC_SCRUB {true} CONFIG.USER_MC4_INITILIZE_MEM_USING_ECC_SCRUB {true} CONFIG.USER_MC5_INITILIZE_MEM_USING_ECC_SCRUB {true} CONFIG.USER_MC6_INITILIZE_MEM_USING_ECC_SCRUB {true} CONFIG.USER_MC7_INITILIZE_MEM_USING_ECC_SCRUB {true} CONFIG.USER_MC8_INITILIZE_MEM_USING_ECC_SCRUB {true} CONFIG.USER_MC9_INITILIZE_MEM_USING_ECC_SCRUB {true} CONFIG.USER_MC10_INITILIZE_MEM_USING_ECC_SCRUB {true} CONFIG.USER_MC11_INITILIZE_MEM_USING_ECC_SCRUB {true} CONFIG.USER_MC12_INITILIZE_MEM_USING_ECC_SCRUB {true} CONFIG.USER_MC13_INITILIZE_MEM_USING_ECC_SCRUB {true} CONFIG.USER_MC14_INITILIZE_MEM_USING_ECC_SCRUB {true} CONFIG.USER_MC15_INITILIZE_MEM_USING_ECC_SCRUB {true}"

   # ECC Scrubbing Enable - again global not per MC
   # Fixed period in cycles of memory controller
   # 512MB to be cycled through
   # - 32B each read/write --> 16MB locations
   # - Want 8 hour scrub cycle
   # - 8 hour/16MB = time between each access =  28.6 us
   # - 450MHz clock --> 12875 cycles NOTE: Presumes clock unchanging, scrub cycle will increase with decreased clock
   # - Specified in units of 256 cycles --> 50 units or 0x32
   #
   if [dict get $CONFIG ECC_SCRUB_EN] {
      if {[regexp -- .*es1.* [get_project_property PART]]} {
         send_msg_id {hbm_memory_subsystem 3-1} WARNING "ECC Scrubbing is enabled for a -es1 part. Disabling due to Xilinx Answer 69267"
         lappend config_list "CONFIG.USER_MC0_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC1_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC2_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC3_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC4_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC5_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC6_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC7_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC8_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC9_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC10_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC11_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC12_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC13_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC14_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC15_ENABLE_ECC_SCRUBBING {false}"
      } else {
         lappend config_list "CONFIG.USER_MC0_ENABLE_ECC_SCRUBBING {true} CONFIG.USER_MC1_ENABLE_ECC_SCRUBBING {true} CONFIG.USER_MC2_ENABLE_ECC_SCRUBBING {true} CONFIG.USER_MC3_ENABLE_ECC_SCRUBBING {true} CONFIG.USER_MC4_ENABLE_ECC_SCRUBBING {true} CONFIG.USER_MC5_ENABLE_ECC_SCRUBBING {true} CONFIG.USER_MC6_ENABLE_ECC_SCRUBBING {true} CONFIG.USER_MC7_ENABLE_ECC_SCRUBBING {true} CONFIG.USER_MC8_ENABLE_ECC_SCRUBBING {true} CONFIG.USER_MC9_ENABLE_ECC_SCRUBBING {true} CONFIG.USER_MC10_ENABLE_ECC_SCRUBBING {true} CONFIG.USER_MC11_ENABLE_ECC_SCRUBBING {true} CONFIG.USER_MC12_ENABLE_ECC_SCRUBBING {true} CONFIG.USER_MC13_ENABLE_ECC_SCRUBBING {true} CONFIG.USER_MC14_ENABLE_ECC_SCRUBBING {true} CONFIG.USER_MC15_ENABLE_ECC_SCRUBBING {true}"
         lappend config_list "CONFIG.USER_MC0_ECC_SCRUB_PERIOD {0x0032} CONFIG.USER_MC1_ECC_SCRUB_PERIOD {0x0032} CONFIG.USER_MC2_ECC_SCRUB_PERIOD {0x0032} CONFIG.USER_MC3_ECC_SCRUB_PERIOD {0x0032} CONFIG.USER_MC4_ECC_SCRUB_PERIOD {0x0032} CONFIG.USER_MC5_ECC_SCRUB_PERIOD {0x0032} CONFIG.USER_MC6_ECC_SCRUB_PERIOD {0x0032} CONFIG.USER_MC7_ECC_SCRUB_PERIOD {0x0032} CONFIG.USER_MC8_ECC_SCRUB_PERIOD {0x0032} CONFIG.USER_MC9_ECC_SCRUB_PERIOD {0x0032} CONFIG.USER_MC10_ECC_SCRUB_PERIOD {0x0032} CONFIG.USER_MC11_ECC_SCRUB_PERIOD {0x0032} CONFIG.USER_MC12_ECC_SCRUB_PERIOD {0x0032} CONFIG.USER_MC13_ECC_SCRUB_PERIOD {0x0032} CONFIG.USER_MC14_ECC_SCRUB_PERIOD {0x0032} CONFIG.USER_MC15_ECC_SCRUB_PERIOD {0x0032}"
      }
   } else {
      lappend config_list "CONFIG.USER_MC0_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC1_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC2_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC3_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC4_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC5_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC6_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC7_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC8_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC9_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC10_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC11_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC12_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC13_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC14_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC15_ENABLE_ECC_SCRUBBING {false}"
   }
} else {
   lappend config_list "CONFIG.USER_MC0_ENABLE_ECC_CORRECTION {false} CONFIG.USER_MC1_ENABLE_ECC_CORRECTION {false} CONFIG.USER_MC2_ENABLE_ECC_CORRECTION {false} CONFIG.USER_MC3_ENABLE_ECC_CORRECTION {false} CONFIG.USER_MC4_ENABLE_ECC_CORRECTION {false} CONFIG.USER_MC5_ENABLE_ECC_CORRECTION {false} CONFIG.USER_MC6_ENABLE_ECC_CORRECTION {false} CONFIG.USER_MC7_ENABLE_ECC_CORRECTION {false} CONFIG.USER_MC8_ENABLE_ECC_CORRECTION {false} CONFIG.USER_MC9_ENABLE_ECC_CORRECTION {false} CONFIG.USER_MC10_ENABLE_ECC_CORRECTION {false} CONFIG.USER_MC11_ENABLE_ECC_CORRECTION {false} CONFIG.USER_MC12_ENABLE_ECC_CORRECTION {false} CONFIG.USER_MC13_ENABLE_ECC_CORRECTION {false} CONFIG.USER_MC14_ENABLE_ECC_CORRECTION {false} CONFIG.USER_MC15_ENABLE_ECC_CORRECTION {false}"
   lappend config_list "CONFIG.USER_MC0_EN_DATA_MASK {true} CONFIG.USER_MC1_EN_DATA_MASK {true} CONFIG.USER_MC2_EN_DATA_MASK {true} CONFIG.USER_MC3_EN_DATA_MASK {true} CONFIG.USER_MC4_EN_DATA_MASK {true} CONFIG.USER_MC5_EN_DATA_MASK {true} CONFIG.USER_MC6_EN_DATA_MASK {true} CONFIG.USER_MC7_EN_DATA_MASK {true} CONFIG.USER_MC8_EN_DATA_MASK {true} CONFIG.USER_MC9_EN_DATA_MASK {true} CONFIG.USER_MC10_EN_DATA_MASK {true} CONFIG.USER_MC11_EN_DATA_MASK {true} CONFIG.USER_MC12_EN_DATA_MASK {true} CONFIG.USER_MC13_EN_DATA_MASK {true} CONFIG.USER_MC14_EN_DATA_MASK {true} CONFIG.USER_MC15_EN_DATA_MASK {true}"
   lappend config_list "CONFIG.USER_MC0_INITILIZE_MEM_USING_ECC_SCRUB {false} CONFIG.USER_MC1_INITILIZE_MEM_USING_ECC_SCRUB {false} CONFIG.USER_MC2_INITILIZE_MEM_USING_ECC_SCRUB {false} CONFIG.USER_MC3_INITILIZE_MEM_USING_ECC_SCRUB {false} CONFIG.USER_MC4_INITILIZE_MEM_USING_ECC_SCRUB {false} CONFIG.USER_MC5_INITILIZE_MEM_USING_ECC_SCRUB {false} CONFIG.USER_MC6_INITILIZE_MEM_USING_ECC_SCRUB {false} CONFIG.USER_MC7_INITILIZE_MEM_USING_ECC_SCRUB {false} CONFIG.USER_MC8_INITILIZE_MEM_USING_ECC_SCRUB {false} CONFIG.USER_MC9_INITILIZE_MEM_USING_ECC_SCRUB {false} CONFIG.USER_MC10_INITILIZE_MEM_USING_ECC_SCRUB {false} CONFIG.USER_MC11_INITILIZE_MEM_USING_ECC_SCRUB {false} CONFIG.USER_MC12_INITILIZE_MEM_USING_ECC_SCRUB {false} CONFIG.USER_MC13_INITILIZE_MEM_USING_ECC_SCRUB {false} CONFIG.USER_MC14_INITILIZE_MEM_USING_ECC_SCRUB {false} CONFIG.USER_MC15_INITILIZE_MEM_USING_ECC_SCRUB {false}"
   lappend config_list "CONFIG.USER_MC0_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC1_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC2_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC3_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC4_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC5_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC6_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC7_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC8_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC9_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC10_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC11_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC12_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC13_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC14_ENABLE_ECC_SCRUBBING {false} CONFIG.USER_MC15_ENABLE_ECC_SCRUBBING {false}"
}

# Disable HBM clock buffer if requested
# Note 1: This is not enabled for the ES devices as the local IP required for cross-switch accesses
#         which is presumed to be used with hbm_memory_subsystem for ES devices already does this
# Note 2: Should be backwards compatible with 2019.1 (HBM has no CONFIG peoperty so check the contents are not empty before setting)
if [dict exists $CONFIG DISABLE_HBM_REF_CLK_BUFG] {
   if [dict get $CONFIG DISABLE_HBM_REF_CLK_BUFG] {
      if {[regexp -- .*es1.* [get_project_property PART]]} {
         send_msg_id {hbm_memory_subsystem 3-1} ERROR "CONFIG property DISABLE_HBM_REF_CLK_BUFG is enabled. This is not supported on ES parts for this IP."
      } else {
        if {[get_property CONFIG.USER_DIS_REF_CLK_BUFG $hbm_inst] != ""} {
           lappend config_list "CONFIG.USER_DIS_REF_CLK_BUFG {true}"
        } else {
           send_msg_id {hbm_memory_subsystem 3-1} ERROR "CONFIG property DISABLE_HBM_REF_CLK_BUFG is enabled. The HBM IP in use does not support this. This was introduced in 2019.2"
        }
      }
   } else {
      if {[regexp -- .*es1.* [get_project_property PART]]} {
      } else {
        if {[get_property CONFIG.USER_DIS_REF_CLK_BUFG $hbm_inst] != ""} {
           lappend config_list "CONFIG.USER_DIS_REF_CLK_BUFG {false}"
        }
      }
   }
}

# Disable APB timeout for 2019.2 IP (might allow cal errors to look like cal is complete otherwise)
# Warn only if parameter does not exist
if {[get_property CONFIG.USER_INIT_TIMEOUT_VAL $hbm_inst] != ""} {
  lappend config_list "CONFIG.USER_INIT_TIMEOUT_VAL {0}"
} else {
  send_msg_id {hbm_memory_subsystem 3-1} WARNING "CONFIG property USER_INIT_TIMEOUT_VAL does not exist on HBM IP instance $hbm_inst. Introduced in 2019.2."
} 

# -----------------------
# Write the config in one go to prevent conflicts
set config_list [concat {*}$config_list {*}$clock_properties]
set_property -dict $config_list $hbm_inst
