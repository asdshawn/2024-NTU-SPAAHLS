-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pass_pass_dataflow is
port (
    m_axi_p0_AWVALID : OUT STD_LOGIC;
    m_axi_p0_AWREADY : IN STD_LOGIC;
    m_axi_p0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_p0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_p0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_p0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_p0_WVALID : OUT STD_LOGIC;
    m_axi_p0_WREADY : IN STD_LOGIC;
    m_axi_p0_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_p0_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_p0_WLAST : OUT STD_LOGIC;
    m_axi_p0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_p0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_p0_ARVALID : OUT STD_LOGIC;
    m_axi_p0_ARREADY : IN STD_LOGIC;
    m_axi_p0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_p0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_p0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_p0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_p0_RVALID : IN STD_LOGIC;
    m_axi_p0_RREADY : OUT STD_LOGIC;
    m_axi_p0_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_p0_RLAST : IN STD_LOGIC;
    m_axi_p0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_p0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_p0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_p0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p0_BVALID : IN STD_LOGIC;
    m_axi_p0_BREADY : OUT STD_LOGIC;
    m_axi_p0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_p0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_p1_AWVALID : OUT STD_LOGIC;
    m_axi_p1_AWREADY : IN STD_LOGIC;
    m_axi_p1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_p1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_p1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_p1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_p1_WVALID : OUT STD_LOGIC;
    m_axi_p1_WREADY : IN STD_LOGIC;
    m_axi_p1_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_p1_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_p1_WLAST : OUT STD_LOGIC;
    m_axi_p1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_p1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_p1_ARVALID : OUT STD_LOGIC;
    m_axi_p1_ARREADY : IN STD_LOGIC;
    m_axi_p1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_p1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_p1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_p1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_p1_RVALID : IN STD_LOGIC;
    m_axi_p1_RREADY : OUT STD_LOGIC;
    m_axi_p1_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_p1_RLAST : IN STD_LOGIC;
    m_axi_p1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_p1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_p1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_p1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p1_BVALID : IN STD_LOGIC;
    m_axi_p1_BREADY : OUT STD_LOGIC;
    m_axi_p1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_p1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r : IN STD_LOGIC_VECTOR (63 downto 0);
    numInputs : IN STD_LOGIC_VECTOR (31 downto 0);
    processDelay : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    output_r_ap_vld : IN STD_LOGIC;
    processDelay_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    input_r_ap_vld : IN STD_LOGIC;
    numInputs_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of pass_pass_dataflow is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_start_full_n : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_start_out : STD_LOGIC;
    signal entry_proc_U0_start_write : STD_LOGIC;
    signal entry_proc_U0_output_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_output_c_write : STD_LOGIC;
    signal entry_proc_U0_processDelay_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_processDelay_c_write : STD_LOGIC;
    signal read_U0_ap_start : STD_LOGIC;
    signal read_U0_ap_done : STD_LOGIC;
    signal read_U0_ap_continue : STD_LOGIC;
    signal read_U0_ap_idle : STD_LOGIC;
    signal read_U0_ap_ready : STD_LOGIC;
    signal read_U0_m_axi_p0_AWVALID : STD_LOGIC;
    signal read_U0_m_axi_p0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_U0_m_axi_p0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_U0_m_axi_p0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_U0_m_axi_p0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_U0_m_axi_p0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_U0_m_axi_p0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_U0_m_axi_p0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_U0_m_axi_p0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_U0_m_axi_p0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_U0_m_axi_p0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_U0_m_axi_p0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_U0_m_axi_p0_WVALID : STD_LOGIC;
    signal read_U0_m_axi_p0_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal read_U0_m_axi_p0_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal read_U0_m_axi_p0_WLAST : STD_LOGIC;
    signal read_U0_m_axi_p0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_U0_m_axi_p0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_U0_m_axi_p0_ARVALID : STD_LOGIC;
    signal read_U0_m_axi_p0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_U0_m_axi_p0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_U0_m_axi_p0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_U0_m_axi_p0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_U0_m_axi_p0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_U0_m_axi_p0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_U0_m_axi_p0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_U0_m_axi_p0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_U0_m_axi_p0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_U0_m_axi_p0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_U0_m_axi_p0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_U0_m_axi_p0_RREADY : STD_LOGIC;
    signal read_U0_m_axi_p0_BREADY : STD_LOGIC;
    signal read_U0_inStream2_din : STD_LOGIC_VECTOR (511 downto 0);
    signal read_U0_inStream2_write : STD_LOGIC;
    signal read_U0_numInputs_c9_din : STD_LOGIC_VECTOR (31 downto 0);
    signal read_U0_numInputs_c9_write : STD_LOGIC;
    signal exec_U0_ap_start : STD_LOGIC;
    signal exec_U0_ap_done : STD_LOGIC;
    signal exec_U0_ap_continue : STD_LOGIC;
    signal exec_U0_ap_idle : STD_LOGIC;
    signal exec_U0_ap_ready : STD_LOGIC;
    signal exec_U0_inStream2_read : STD_LOGIC;
    signal exec_U0_outStream3_din : STD_LOGIC_VECTOR (511 downto 0);
    signal exec_U0_outStream3_write : STD_LOGIC;
    signal exec_U0_numInputs_read : STD_LOGIC;
    signal exec_U0_processDelay_read : STD_LOGIC;
    signal exec_U0_numInputs_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal exec_U0_numInputs_c_write : STD_LOGIC;
    signal write_U0_ap_start : STD_LOGIC;
    signal write_U0_ap_done : STD_LOGIC;
    signal write_U0_ap_continue : STD_LOGIC;
    signal write_U0_ap_idle : STD_LOGIC;
    signal write_U0_ap_ready : STD_LOGIC;
    signal write_U0_outStream3_read : STD_LOGIC;
    signal write_U0_m_axi_p1_AWVALID : STD_LOGIC;
    signal write_U0_m_axi_p1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal write_U0_m_axi_p1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_U0_m_axi_p1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_U0_m_axi_p1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal write_U0_m_axi_p1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal write_U0_m_axi_p1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal write_U0_m_axi_p1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal write_U0_m_axi_p1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal write_U0_m_axi_p1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal write_U0_m_axi_p1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal write_U0_m_axi_p1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_U0_m_axi_p1_WVALID : STD_LOGIC;
    signal write_U0_m_axi_p1_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal write_U0_m_axi_p1_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal write_U0_m_axi_p1_WLAST : STD_LOGIC;
    signal write_U0_m_axi_p1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_U0_m_axi_p1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_U0_m_axi_p1_ARVALID : STD_LOGIC;
    signal write_U0_m_axi_p1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal write_U0_m_axi_p1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_U0_m_axi_p1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_U0_m_axi_p1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal write_U0_m_axi_p1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal write_U0_m_axi_p1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal write_U0_m_axi_p1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal write_U0_m_axi_p1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal write_U0_m_axi_p1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal write_U0_m_axi_p1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal write_U0_m_axi_p1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_U0_m_axi_p1_RREADY : STD_LOGIC;
    signal write_U0_m_axi_p1_BREADY : STD_LOGIC;
    signal write_U0_output_r_read : STD_LOGIC;
    signal write_U0_numInputs_read : STD_LOGIC;
    signal output_c_full_n : STD_LOGIC;
    signal output_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal output_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal output_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal output_c_empty_n : STD_LOGIC;
    signal processDelay_c_full_n : STD_LOGIC;
    signal processDelay_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal processDelay_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal processDelay_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal processDelay_c_empty_n : STD_LOGIC;
    signal inStream_full_n : STD_LOGIC;
    signal inStream_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal inStream_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_empty_n : STD_LOGIC;
    signal numInputs_c9_full_n : STD_LOGIC;
    signal numInputs_c9_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal numInputs_c9_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal numInputs_c9_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal numInputs_c9_empty_n : STD_LOGIC;
    signal outStream_full_n : STD_LOGIC;
    signal outStream_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal outStream_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_empty_n : STD_LOGIC;
    signal numInputs_c_full_n : STD_LOGIC;
    signal numInputs_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal numInputs_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal numInputs_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal numInputs_c_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_read_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_read_U0_ap_ready : STD_LOGIC;
    signal start_for_exec_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_exec_U0_full_n : STD_LOGIC;
    signal start_for_exec_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_exec_U0_empty_n : STD_LOGIC;
    signal start_for_write_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_U0_full_n : STD_LOGIC;
    signal start_for_write_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pass_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        output_r : IN STD_LOGIC_VECTOR (63 downto 0);
        output_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        output_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        output_c_full_n : IN STD_LOGIC;
        output_c_write : OUT STD_LOGIC;
        processDelay : IN STD_LOGIC_VECTOR (31 downto 0);
        processDelay_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        processDelay_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        processDelay_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        processDelay_c_full_n : IN STD_LOGIC;
        processDelay_c_write : OUT STD_LOGIC );
    end component;


    component pass_read_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_p0_AWVALID : OUT STD_LOGIC;
        m_axi_p0_AWREADY : IN STD_LOGIC;
        m_axi_p0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_p0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_WVALID : OUT STD_LOGIC;
        m_axi_p0_WREADY : IN STD_LOGIC;
        m_axi_p0_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_p0_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p0_WLAST : OUT STD_LOGIC;
        m_axi_p0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_ARVALID : OUT STD_LOGIC;
        m_axi_p0_ARREADY : IN STD_LOGIC;
        m_axi_p0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_p0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_RVALID : IN STD_LOGIC;
        m_axi_p0_RREADY : OUT STD_LOGIC;
        m_axi_p0_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_p0_RLAST : IN STD_LOGIC;
        m_axi_p0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_p0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p0_BVALID : IN STD_LOGIC;
        m_axi_p0_BREADY : OUT STD_LOGIC;
        m_axi_p0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r : IN STD_LOGIC_VECTOR (63 downto 0);
        inStream2_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        inStream2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream2_full_n : IN STD_LOGIC;
        inStream2_write : OUT STD_LOGIC;
        numInputs : IN STD_LOGIC_VECTOR (31 downto 0);
        numInputs_c9_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        numInputs_c9_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numInputs_c9_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numInputs_c9_full_n : IN STD_LOGIC;
        numInputs_c9_write : OUT STD_LOGIC );
    end component;


    component pass_exec IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inStream2_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        inStream2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream2_empty_n : IN STD_LOGIC;
        inStream2_read : OUT STD_LOGIC;
        outStream3_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        outStream3_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        outStream3_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        outStream3_full_n : IN STD_LOGIC;
        outStream3_write : OUT STD_LOGIC;
        numInputs_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numInputs_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numInputs_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numInputs_empty_n : IN STD_LOGIC;
        numInputs_read : OUT STD_LOGIC;
        processDelay_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        processDelay_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        processDelay_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        processDelay_empty_n : IN STD_LOGIC;
        processDelay_read : OUT STD_LOGIC;
        numInputs_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        numInputs_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numInputs_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numInputs_c_full_n : IN STD_LOGIC;
        numInputs_c_write : OUT STD_LOGIC );
    end component;


    component pass_write_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outStream3_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        outStream3_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        outStream3_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        outStream3_empty_n : IN STD_LOGIC;
        outStream3_read : OUT STD_LOGIC;
        m_axi_p1_AWVALID : OUT STD_LOGIC;
        m_axi_p1_AWREADY : IN STD_LOGIC;
        m_axi_p1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_p1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_WVALID : OUT STD_LOGIC;
        m_axi_p1_WREADY : IN STD_LOGIC;
        m_axi_p1_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_p1_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p1_WLAST : OUT STD_LOGIC;
        m_axi_p1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_ARVALID : OUT STD_LOGIC;
        m_axi_p1_ARREADY : IN STD_LOGIC;
        m_axi_p1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_p1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_RVALID : IN STD_LOGIC;
        m_axi_p1_RREADY : OUT STD_LOGIC;
        m_axi_p1_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_p1_RLAST : IN STD_LOGIC;
        m_axi_p1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_p1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p1_BVALID : IN STD_LOGIC;
        m_axi_p1_BREADY : OUT STD_LOGIC;
        m_axi_p1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        output_r_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        output_r_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        output_r_empty_n : IN STD_LOGIC;
        output_r_read : OUT STD_LOGIC;
        numInputs_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numInputs_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        numInputs_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        numInputs_empty_n : IN STD_LOGIC;
        numInputs_read : OUT STD_LOGIC );
    end component;


    component pass_fifo_w64_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component pass_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component pass_fifo_w512_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (511 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (511 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component pass_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component pass_start_for_exec_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component pass_start_for_write_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    entry_proc_U0 : component pass_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => entry_proc_U0_ap_start,
        start_full_n => entry_proc_U0_start_full_n,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        start_out => entry_proc_U0_start_out,
        start_write => entry_proc_U0_start_write,
        output_r => output_r,
        output_c_din => entry_proc_U0_output_c_din,
        output_c_num_data_valid => output_c_num_data_valid,
        output_c_fifo_cap => output_c_fifo_cap,
        output_c_full_n => output_c_full_n,
        output_c_write => entry_proc_U0_output_c_write,
        processDelay => processDelay,
        processDelay_c_din => entry_proc_U0_processDelay_c_din,
        processDelay_c_num_data_valid => processDelay_c_num_data_valid,
        processDelay_c_fifo_cap => processDelay_c_fifo_cap,
        processDelay_c_full_n => processDelay_c_full_n,
        processDelay_c_write => entry_proc_U0_processDelay_c_write);

    read_U0 : component pass_read_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => read_U0_ap_start,
        ap_done => read_U0_ap_done,
        ap_continue => read_U0_ap_continue,
        ap_idle => read_U0_ap_idle,
        ap_ready => read_U0_ap_ready,
        m_axi_p0_AWVALID => read_U0_m_axi_p0_AWVALID,
        m_axi_p0_AWREADY => ap_const_logic_0,
        m_axi_p0_AWADDR => read_U0_m_axi_p0_AWADDR,
        m_axi_p0_AWID => read_U0_m_axi_p0_AWID,
        m_axi_p0_AWLEN => read_U0_m_axi_p0_AWLEN,
        m_axi_p0_AWSIZE => read_U0_m_axi_p0_AWSIZE,
        m_axi_p0_AWBURST => read_U0_m_axi_p0_AWBURST,
        m_axi_p0_AWLOCK => read_U0_m_axi_p0_AWLOCK,
        m_axi_p0_AWCACHE => read_U0_m_axi_p0_AWCACHE,
        m_axi_p0_AWPROT => read_U0_m_axi_p0_AWPROT,
        m_axi_p0_AWQOS => read_U0_m_axi_p0_AWQOS,
        m_axi_p0_AWREGION => read_U0_m_axi_p0_AWREGION,
        m_axi_p0_AWUSER => read_U0_m_axi_p0_AWUSER,
        m_axi_p0_WVALID => read_U0_m_axi_p0_WVALID,
        m_axi_p0_WREADY => ap_const_logic_0,
        m_axi_p0_WDATA => read_U0_m_axi_p0_WDATA,
        m_axi_p0_WSTRB => read_U0_m_axi_p0_WSTRB,
        m_axi_p0_WLAST => read_U0_m_axi_p0_WLAST,
        m_axi_p0_WID => read_U0_m_axi_p0_WID,
        m_axi_p0_WUSER => read_U0_m_axi_p0_WUSER,
        m_axi_p0_ARVALID => read_U0_m_axi_p0_ARVALID,
        m_axi_p0_ARREADY => m_axi_p0_ARREADY,
        m_axi_p0_ARADDR => read_U0_m_axi_p0_ARADDR,
        m_axi_p0_ARID => read_U0_m_axi_p0_ARID,
        m_axi_p0_ARLEN => read_U0_m_axi_p0_ARLEN,
        m_axi_p0_ARSIZE => read_U0_m_axi_p0_ARSIZE,
        m_axi_p0_ARBURST => read_U0_m_axi_p0_ARBURST,
        m_axi_p0_ARLOCK => read_U0_m_axi_p0_ARLOCK,
        m_axi_p0_ARCACHE => read_U0_m_axi_p0_ARCACHE,
        m_axi_p0_ARPROT => read_U0_m_axi_p0_ARPROT,
        m_axi_p0_ARQOS => read_U0_m_axi_p0_ARQOS,
        m_axi_p0_ARREGION => read_U0_m_axi_p0_ARREGION,
        m_axi_p0_ARUSER => read_U0_m_axi_p0_ARUSER,
        m_axi_p0_RVALID => m_axi_p0_RVALID,
        m_axi_p0_RREADY => read_U0_m_axi_p0_RREADY,
        m_axi_p0_RDATA => m_axi_p0_RDATA,
        m_axi_p0_RLAST => m_axi_p0_RLAST,
        m_axi_p0_RID => m_axi_p0_RID,
        m_axi_p0_RFIFONUM => m_axi_p0_RFIFONUM,
        m_axi_p0_RUSER => m_axi_p0_RUSER,
        m_axi_p0_RRESP => m_axi_p0_RRESP,
        m_axi_p0_BVALID => ap_const_logic_0,
        m_axi_p0_BREADY => read_U0_m_axi_p0_BREADY,
        m_axi_p0_BRESP => ap_const_lv2_0,
        m_axi_p0_BID => ap_const_lv1_0,
        m_axi_p0_BUSER => ap_const_lv1_0,
        input_r => input_r,
        inStream2_din => read_U0_inStream2_din,
        inStream2_num_data_valid => inStream_num_data_valid,
        inStream2_fifo_cap => inStream_fifo_cap,
        inStream2_full_n => inStream_full_n,
        inStream2_write => read_U0_inStream2_write,
        numInputs => numInputs,
        numInputs_c9_din => read_U0_numInputs_c9_din,
        numInputs_c9_num_data_valid => numInputs_c9_num_data_valid,
        numInputs_c9_fifo_cap => numInputs_c9_fifo_cap,
        numInputs_c9_full_n => numInputs_c9_full_n,
        numInputs_c9_write => read_U0_numInputs_c9_write);

    exec_U0 : component pass_exec
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => exec_U0_ap_start,
        ap_done => exec_U0_ap_done,
        ap_continue => exec_U0_ap_continue,
        ap_idle => exec_U0_ap_idle,
        ap_ready => exec_U0_ap_ready,
        inStream2_dout => inStream_dout,
        inStream2_num_data_valid => inStream_num_data_valid,
        inStream2_fifo_cap => inStream_fifo_cap,
        inStream2_empty_n => inStream_empty_n,
        inStream2_read => exec_U0_inStream2_read,
        outStream3_din => exec_U0_outStream3_din,
        outStream3_num_data_valid => outStream_num_data_valid,
        outStream3_fifo_cap => outStream_fifo_cap,
        outStream3_full_n => outStream_full_n,
        outStream3_write => exec_U0_outStream3_write,
        numInputs_dout => numInputs_c9_dout,
        numInputs_num_data_valid => numInputs_c9_num_data_valid,
        numInputs_fifo_cap => numInputs_c9_fifo_cap,
        numInputs_empty_n => numInputs_c9_empty_n,
        numInputs_read => exec_U0_numInputs_read,
        processDelay_dout => processDelay_c_dout,
        processDelay_num_data_valid => processDelay_c_num_data_valid,
        processDelay_fifo_cap => processDelay_c_fifo_cap,
        processDelay_empty_n => processDelay_c_empty_n,
        processDelay_read => exec_U0_processDelay_read,
        numInputs_c_din => exec_U0_numInputs_c_din,
        numInputs_c_num_data_valid => numInputs_c_num_data_valid,
        numInputs_c_fifo_cap => numInputs_c_fifo_cap,
        numInputs_c_full_n => numInputs_c_full_n,
        numInputs_c_write => exec_U0_numInputs_c_write);

    write_U0 : component pass_write_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => write_U0_ap_start,
        ap_done => write_U0_ap_done,
        ap_continue => write_U0_ap_continue,
        ap_idle => write_U0_ap_idle,
        ap_ready => write_U0_ap_ready,
        outStream3_dout => outStream_dout,
        outStream3_num_data_valid => outStream_num_data_valid,
        outStream3_fifo_cap => outStream_fifo_cap,
        outStream3_empty_n => outStream_empty_n,
        outStream3_read => write_U0_outStream3_read,
        m_axi_p1_AWVALID => write_U0_m_axi_p1_AWVALID,
        m_axi_p1_AWREADY => m_axi_p1_AWREADY,
        m_axi_p1_AWADDR => write_U0_m_axi_p1_AWADDR,
        m_axi_p1_AWID => write_U0_m_axi_p1_AWID,
        m_axi_p1_AWLEN => write_U0_m_axi_p1_AWLEN,
        m_axi_p1_AWSIZE => write_U0_m_axi_p1_AWSIZE,
        m_axi_p1_AWBURST => write_U0_m_axi_p1_AWBURST,
        m_axi_p1_AWLOCK => write_U0_m_axi_p1_AWLOCK,
        m_axi_p1_AWCACHE => write_U0_m_axi_p1_AWCACHE,
        m_axi_p1_AWPROT => write_U0_m_axi_p1_AWPROT,
        m_axi_p1_AWQOS => write_U0_m_axi_p1_AWQOS,
        m_axi_p1_AWREGION => write_U0_m_axi_p1_AWREGION,
        m_axi_p1_AWUSER => write_U0_m_axi_p1_AWUSER,
        m_axi_p1_WVALID => write_U0_m_axi_p1_WVALID,
        m_axi_p1_WREADY => m_axi_p1_WREADY,
        m_axi_p1_WDATA => write_U0_m_axi_p1_WDATA,
        m_axi_p1_WSTRB => write_U0_m_axi_p1_WSTRB,
        m_axi_p1_WLAST => write_U0_m_axi_p1_WLAST,
        m_axi_p1_WID => write_U0_m_axi_p1_WID,
        m_axi_p1_WUSER => write_U0_m_axi_p1_WUSER,
        m_axi_p1_ARVALID => write_U0_m_axi_p1_ARVALID,
        m_axi_p1_ARREADY => ap_const_logic_0,
        m_axi_p1_ARADDR => write_U0_m_axi_p1_ARADDR,
        m_axi_p1_ARID => write_U0_m_axi_p1_ARID,
        m_axi_p1_ARLEN => write_U0_m_axi_p1_ARLEN,
        m_axi_p1_ARSIZE => write_U0_m_axi_p1_ARSIZE,
        m_axi_p1_ARBURST => write_U0_m_axi_p1_ARBURST,
        m_axi_p1_ARLOCK => write_U0_m_axi_p1_ARLOCK,
        m_axi_p1_ARCACHE => write_U0_m_axi_p1_ARCACHE,
        m_axi_p1_ARPROT => write_U0_m_axi_p1_ARPROT,
        m_axi_p1_ARQOS => write_U0_m_axi_p1_ARQOS,
        m_axi_p1_ARREGION => write_U0_m_axi_p1_ARREGION,
        m_axi_p1_ARUSER => write_U0_m_axi_p1_ARUSER,
        m_axi_p1_RVALID => ap_const_logic_0,
        m_axi_p1_RREADY => write_U0_m_axi_p1_RREADY,
        m_axi_p1_RDATA => ap_const_lv512_lc_1,
        m_axi_p1_RLAST => ap_const_logic_0,
        m_axi_p1_RID => ap_const_lv1_0,
        m_axi_p1_RFIFONUM => ap_const_lv9_0,
        m_axi_p1_RUSER => ap_const_lv1_0,
        m_axi_p1_RRESP => ap_const_lv2_0,
        m_axi_p1_BVALID => m_axi_p1_BVALID,
        m_axi_p1_BREADY => write_U0_m_axi_p1_BREADY,
        m_axi_p1_BRESP => m_axi_p1_BRESP,
        m_axi_p1_BID => m_axi_p1_BID,
        m_axi_p1_BUSER => m_axi_p1_BUSER,
        output_r_dout => output_c_dout,
        output_r_num_data_valid => output_c_num_data_valid,
        output_r_fifo_cap => output_c_fifo_cap,
        output_r_empty_n => output_c_empty_n,
        output_r_read => write_U0_output_r_read,
        numInputs_dout => numInputs_c_dout,
        numInputs_num_data_valid => numInputs_c_num_data_valid,
        numInputs_fifo_cap => numInputs_c_fifo_cap,
        numInputs_empty_n => numInputs_c_empty_n,
        numInputs_read => write_U0_numInputs_read);

    output_c_U : component pass_fifo_w64_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_output_c_din,
        if_full_n => output_c_full_n,
        if_write => entry_proc_U0_output_c_write,
        if_dout => output_c_dout,
        if_num_data_valid => output_c_num_data_valid,
        if_fifo_cap => output_c_fifo_cap,
        if_empty_n => output_c_empty_n,
        if_read => write_U0_output_r_read);

    processDelay_c_U : component pass_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_processDelay_c_din,
        if_full_n => processDelay_c_full_n,
        if_write => entry_proc_U0_processDelay_c_write,
        if_dout => processDelay_c_dout,
        if_num_data_valid => processDelay_c_num_data_valid,
        if_fifo_cap => processDelay_c_fifo_cap,
        if_empty_n => processDelay_c_empty_n,
        if_read => exec_U0_processDelay_read);

    inStream_U : component pass_fifo_w512_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_U0_inStream2_din,
        if_full_n => inStream_full_n,
        if_write => read_U0_inStream2_write,
        if_dout => inStream_dout,
        if_num_data_valid => inStream_num_data_valid,
        if_fifo_cap => inStream_fifo_cap,
        if_empty_n => inStream_empty_n,
        if_read => exec_U0_inStream2_read);

    numInputs_c9_U : component pass_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_U0_numInputs_c9_din,
        if_full_n => numInputs_c9_full_n,
        if_write => read_U0_numInputs_c9_write,
        if_dout => numInputs_c9_dout,
        if_num_data_valid => numInputs_c9_num_data_valid,
        if_fifo_cap => numInputs_c9_fifo_cap,
        if_empty_n => numInputs_c9_empty_n,
        if_read => exec_U0_numInputs_read);

    outStream_U : component pass_fifo_w512_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => exec_U0_outStream3_din,
        if_full_n => outStream_full_n,
        if_write => exec_U0_outStream3_write,
        if_dout => outStream_dout,
        if_num_data_valid => outStream_num_data_valid,
        if_fifo_cap => outStream_fifo_cap,
        if_empty_n => outStream_empty_n,
        if_read => write_U0_outStream3_read);

    numInputs_c_U : component pass_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => exec_U0_numInputs_c_din,
        if_full_n => numInputs_c_full_n,
        if_write => exec_U0_numInputs_c_write,
        if_dout => numInputs_c_dout,
        if_num_data_valid => numInputs_c_num_data_valid,
        if_fifo_cap => numInputs_c_fifo_cap,
        if_empty_n => numInputs_c_empty_n,
        if_read => write_U0_numInputs_read);

    start_for_exec_U0_U : component pass_start_for_exec_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_exec_U0_din,
        if_full_n => start_for_exec_U0_full_n,
        if_write => entry_proc_U0_start_write,
        if_dout => start_for_exec_U0_dout,
        if_empty_n => start_for_exec_U0_empty_n,
        if_read => exec_U0_ap_ready);

    start_for_write_U0_U : component pass_start_for_write_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_write_U0_din,
        if_full_n => start_for_write_U0_full_n,
        if_write => entry_proc_U0_start_write,
        if_dout => start_for_write_U0_dout,
        if_empty_n => start_for_write_U0_empty_n,
        if_read => write_U0_ap_ready);





    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_read_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_read_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_read_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_read_U0_ap_ready <= ap_sync_read_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= write_U0_ap_done;
    ap_idle <= (write_U0_ap_idle and read_U0_ap_idle and exec_U0_ap_idle and entry_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_read_U0_ap_ready <= (read_U0_ap_ready or ap_sync_reg_read_U0_ap_ready);
    ap_sync_ready <= (ap_sync_read_U0_ap_ready and ap_sync_entry_proc_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    entry_proc_U0_start_full_n <= (start_for_write_U0_full_n and start_for_exec_U0_full_n);
    exec_U0_ap_continue <= ap_const_logic_1;
    exec_U0_ap_start <= start_for_exec_U0_empty_n;
    m_axi_p0_ARADDR <= read_U0_m_axi_p0_ARADDR;
    m_axi_p0_ARBURST <= read_U0_m_axi_p0_ARBURST;
    m_axi_p0_ARCACHE <= read_U0_m_axi_p0_ARCACHE;
    m_axi_p0_ARID <= read_U0_m_axi_p0_ARID;
    m_axi_p0_ARLEN <= read_U0_m_axi_p0_ARLEN;
    m_axi_p0_ARLOCK <= read_U0_m_axi_p0_ARLOCK;
    m_axi_p0_ARPROT <= read_U0_m_axi_p0_ARPROT;
    m_axi_p0_ARQOS <= read_U0_m_axi_p0_ARQOS;
    m_axi_p0_ARREGION <= read_U0_m_axi_p0_ARREGION;
    m_axi_p0_ARSIZE <= read_U0_m_axi_p0_ARSIZE;
    m_axi_p0_ARUSER <= read_U0_m_axi_p0_ARUSER;
    m_axi_p0_ARVALID <= read_U0_m_axi_p0_ARVALID;
    m_axi_p0_AWADDR <= ap_const_lv64_0;
    m_axi_p0_AWBURST <= ap_const_lv2_0;
    m_axi_p0_AWCACHE <= ap_const_lv4_0;
    m_axi_p0_AWID <= ap_const_lv1_0;
    m_axi_p0_AWLEN <= ap_const_lv32_0;
    m_axi_p0_AWLOCK <= ap_const_lv2_0;
    m_axi_p0_AWPROT <= ap_const_lv3_0;
    m_axi_p0_AWQOS <= ap_const_lv4_0;
    m_axi_p0_AWREGION <= ap_const_lv4_0;
    m_axi_p0_AWSIZE <= ap_const_lv3_0;
    m_axi_p0_AWUSER <= ap_const_lv1_0;
    m_axi_p0_AWVALID <= ap_const_logic_0;
    m_axi_p0_BREADY <= ap_const_logic_0;
    m_axi_p0_RREADY <= read_U0_m_axi_p0_RREADY;
    m_axi_p0_WDATA <= ap_const_lv512_lc_1;
    m_axi_p0_WID <= ap_const_lv1_0;
    m_axi_p0_WLAST <= ap_const_logic_0;
    m_axi_p0_WSTRB <= ap_const_lv64_0;
    m_axi_p0_WUSER <= ap_const_lv1_0;
    m_axi_p0_WVALID <= ap_const_logic_0;
    m_axi_p1_ARADDR <= ap_const_lv64_0;
    m_axi_p1_ARBURST <= ap_const_lv2_0;
    m_axi_p1_ARCACHE <= ap_const_lv4_0;
    m_axi_p1_ARID <= ap_const_lv1_0;
    m_axi_p1_ARLEN <= ap_const_lv32_0;
    m_axi_p1_ARLOCK <= ap_const_lv2_0;
    m_axi_p1_ARPROT <= ap_const_lv3_0;
    m_axi_p1_ARQOS <= ap_const_lv4_0;
    m_axi_p1_ARREGION <= ap_const_lv4_0;
    m_axi_p1_ARSIZE <= ap_const_lv3_0;
    m_axi_p1_ARUSER <= ap_const_lv1_0;
    m_axi_p1_ARVALID <= ap_const_logic_0;
    m_axi_p1_AWADDR <= write_U0_m_axi_p1_AWADDR;
    m_axi_p1_AWBURST <= write_U0_m_axi_p1_AWBURST;
    m_axi_p1_AWCACHE <= write_U0_m_axi_p1_AWCACHE;
    m_axi_p1_AWID <= write_U0_m_axi_p1_AWID;
    m_axi_p1_AWLEN <= write_U0_m_axi_p1_AWLEN;
    m_axi_p1_AWLOCK <= write_U0_m_axi_p1_AWLOCK;
    m_axi_p1_AWPROT <= write_U0_m_axi_p1_AWPROT;
    m_axi_p1_AWQOS <= write_U0_m_axi_p1_AWQOS;
    m_axi_p1_AWREGION <= write_U0_m_axi_p1_AWREGION;
    m_axi_p1_AWSIZE <= write_U0_m_axi_p1_AWSIZE;
    m_axi_p1_AWUSER <= write_U0_m_axi_p1_AWUSER;
    m_axi_p1_AWVALID <= write_U0_m_axi_p1_AWVALID;
    m_axi_p1_BREADY <= write_U0_m_axi_p1_BREADY;
    m_axi_p1_RREADY <= ap_const_logic_0;
    m_axi_p1_WDATA <= write_U0_m_axi_p1_WDATA;
    m_axi_p1_WID <= write_U0_m_axi_p1_WID;
    m_axi_p1_WLAST <= write_U0_m_axi_p1_WLAST;
    m_axi_p1_WSTRB <= write_U0_m_axi_p1_WSTRB;
    m_axi_p1_WUSER <= write_U0_m_axi_p1_WUSER;
    m_axi_p1_WVALID <= write_U0_m_axi_p1_WVALID;
    read_U0_ap_continue <= ap_const_logic_1;
    read_U0_ap_start <= ((ap_sync_reg_read_U0_ap_ready xor ap_const_logic_1) and ap_start);
    start_for_exec_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_write_U0_din <= (0=>ap_const_logic_1, others=>'-');
    write_U0_ap_continue <= ap_continue;
    write_U0_ap_start <= start_for_write_U0_empty_n;
end behav;
