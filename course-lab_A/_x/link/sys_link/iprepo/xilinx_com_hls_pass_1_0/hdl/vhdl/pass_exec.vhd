-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pass_exec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inStream2_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    inStream2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream2_empty_n : IN STD_LOGIC;
    inStream2_read : OUT STD_LOGIC;
    outStream3_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    outStream3_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    outStream3_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    outStream3_full_n : IN STD_LOGIC;
    outStream3_write : OUT STD_LOGIC;
    numInputs_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    numInputs_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    numInputs_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    numInputs_empty_n : IN STD_LOGIC;
    numInputs_read : OUT STD_LOGIC;
    processDelay_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    processDelay_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    processDelay_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    processDelay_empty_n : IN STD_LOGIC;
    processDelay_read : OUT STD_LOGIC;
    numInputs_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    numInputs_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    numInputs_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    numInputs_c_full_n : IN STD_LOGIC;
    numInputs_c_write : OUT STD_LOGIC );
end;


architecture behav of pass_exec is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal numInputs_blk_n : STD_LOGIC;
    signal processDelay_blk_n : STD_LOGIC;
    signal numInputs_c_blk_n : STD_LOGIC;
    signal numInputs_read_reg_93 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp29_fu_71_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp29_reg_98 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_fu_77_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_reg_103 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_fu_86_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln25_reg_108 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_start : STD_LOGIC;
    signal grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_done : STD_LOGIC;
    signal grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_idle : STD_LOGIC;
    signal grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_ready : STD_LOGIC;
    signal grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_inStream2_read : STD_LOGIC;
    signal grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_outStream3_din : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_outStream3_write : STD_LOGIC;
    signal grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal zext_ln23_fu_83_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pass_exec_Pipeline_VITIS_LOOP_23_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inStream2_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        inStream2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream2_empty_n : IN STD_LOGIC;
        inStream2_read : OUT STD_LOGIC;
        outStream3_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        outStream3_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        outStream3_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        outStream3_full_n : IN STD_LOGIC;
        outStream3_write : OUT STD_LOGIC;
        numInputs_load : IN STD_LOGIC_VECTOR (31 downto 0);
        zext_ln25 : IN STD_LOGIC_VECTOR (32 downto 0);
        cmp29 : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60 : component pass_exec_Pipeline_VITIS_LOOP_23_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_start,
        ap_done => grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_done,
        ap_idle => grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_idle,
        ap_ready => grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_ready,
        inStream2_dout => inStream2_dout,
        inStream2_num_data_valid => ap_const_lv2_0,
        inStream2_fifo_cap => ap_const_lv2_0,
        inStream2_empty_n => inStream2_empty_n,
        inStream2_read => grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_inStream2_read,
        outStream3_din => grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_outStream3_din,
        outStream3_num_data_valid => ap_const_lv2_0,
        outStream3_fifo_cap => ap_const_lv2_0,
        outStream3_full_n => outStream3_full_n,
        outStream3_write => grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_outStream3_write,
        numInputs_load => numInputs_read_reg_93,
        zext_ln25 => add_ln25_reg_108,
        cmp29 => cmp29_reg_98);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_ready = ap_const_logic_1)) then 
                    grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln23_reg_103 <= add_ln23_fu_77_p2;
                cmp29_reg_98 <= cmp29_fu_71_p2;
                numInputs_read_reg_93 <= numInputs_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln25_reg_108 <= add_ln25_fu_86_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, numInputs_empty_n, processDelay_empty_n, numInputs_c_full_n, grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (numInputs_c_full_n = ap_const_logic_0) or (processDelay_empty_n = ap_const_logic_0) or (numInputs_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln23_fu_77_p2 <= std_logic_vector(unsigned(processDelay_dout) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln25_fu_86_p2 <= std_logic_vector(unsigned(zext_ln23_fu_83_p1) + unsigned(ap_const_lv33_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, numInputs_empty_n, processDelay_empty_n, numInputs_c_full_n)
    begin
        if (((ap_start = ap_const_logic_0) or (numInputs_c_full_n = ap_const_logic_0) or (processDelay_empty_n = ap_const_logic_0) or (numInputs_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_done)
    begin
        if ((grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, numInputs_empty_n, processDelay_empty_n, numInputs_c_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (numInputs_c_full_n = ap_const_logic_0) or (processDelay_empty_n = ap_const_logic_0) or (numInputs_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cmp29_fu_71_p2 <= "0" when (processDelay_dout = ap_const_lv32_0) else "1";
    grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_start <= grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_start_reg;

    inStream2_read_assign_proc : process(grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_inStream2_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inStream2_read <= grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_inStream2_read;
        else 
            inStream2_read <= ap_const_logic_0;
        end if; 
    end process;


    numInputs_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, numInputs_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            numInputs_blk_n <= numInputs_empty_n;
        else 
            numInputs_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    numInputs_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, numInputs_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            numInputs_c_blk_n <= numInputs_c_full_n;
        else 
            numInputs_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    numInputs_c_din <= numInputs_dout;

    numInputs_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, numInputs_empty_n, processDelay_empty_n, numInputs_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (numInputs_c_full_n = ap_const_logic_0) or (processDelay_empty_n = ap_const_logic_0) or (numInputs_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            numInputs_c_write <= ap_const_logic_1;
        else 
            numInputs_c_write <= ap_const_logic_0;
        end if; 
    end process;


    numInputs_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, numInputs_empty_n, processDelay_empty_n, numInputs_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (numInputs_c_full_n = ap_const_logic_0) or (processDelay_empty_n = ap_const_logic_0) or (numInputs_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            numInputs_read <= ap_const_logic_1;
        else 
            numInputs_read <= ap_const_logic_0;
        end if; 
    end process;

    outStream3_din <= grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_outStream3_din;

    outStream3_write_assign_proc : process(grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_outStream3_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            outStream3_write <= grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_outStream3_write;
        else 
            outStream3_write <= ap_const_logic_0;
        end if; 
    end process;


    processDelay_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, processDelay_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            processDelay_blk_n <= processDelay_empty_n;
        else 
            processDelay_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    processDelay_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, numInputs_empty_n, processDelay_empty_n, numInputs_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (numInputs_c_full_n = ap_const_logic_0) or (processDelay_empty_n = ap_const_logic_0) or (numInputs_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            processDelay_read <= ap_const_logic_1;
        else 
            processDelay_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln23_fu_83_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_reg_103),33));
end behav;
