// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pass_pass_dataflow (
        m_axi_p0_AWVALID,
        m_axi_p0_AWREADY,
        m_axi_p0_AWADDR,
        m_axi_p0_AWID,
        m_axi_p0_AWLEN,
        m_axi_p0_AWSIZE,
        m_axi_p0_AWBURST,
        m_axi_p0_AWLOCK,
        m_axi_p0_AWCACHE,
        m_axi_p0_AWPROT,
        m_axi_p0_AWQOS,
        m_axi_p0_AWREGION,
        m_axi_p0_AWUSER,
        m_axi_p0_WVALID,
        m_axi_p0_WREADY,
        m_axi_p0_WDATA,
        m_axi_p0_WSTRB,
        m_axi_p0_WLAST,
        m_axi_p0_WID,
        m_axi_p0_WUSER,
        m_axi_p0_ARVALID,
        m_axi_p0_ARREADY,
        m_axi_p0_ARADDR,
        m_axi_p0_ARID,
        m_axi_p0_ARLEN,
        m_axi_p0_ARSIZE,
        m_axi_p0_ARBURST,
        m_axi_p0_ARLOCK,
        m_axi_p0_ARCACHE,
        m_axi_p0_ARPROT,
        m_axi_p0_ARQOS,
        m_axi_p0_ARREGION,
        m_axi_p0_ARUSER,
        m_axi_p0_RVALID,
        m_axi_p0_RREADY,
        m_axi_p0_RDATA,
        m_axi_p0_RLAST,
        m_axi_p0_RID,
        m_axi_p0_RFIFONUM,
        m_axi_p0_RUSER,
        m_axi_p0_RRESP,
        m_axi_p0_BVALID,
        m_axi_p0_BREADY,
        m_axi_p0_BRESP,
        m_axi_p0_BID,
        m_axi_p0_BUSER,
        input_r,
        m_axi_p1_AWVALID,
        m_axi_p1_AWREADY,
        m_axi_p1_AWADDR,
        m_axi_p1_AWID,
        m_axi_p1_AWLEN,
        m_axi_p1_AWSIZE,
        m_axi_p1_AWBURST,
        m_axi_p1_AWLOCK,
        m_axi_p1_AWCACHE,
        m_axi_p1_AWPROT,
        m_axi_p1_AWQOS,
        m_axi_p1_AWREGION,
        m_axi_p1_AWUSER,
        m_axi_p1_WVALID,
        m_axi_p1_WREADY,
        m_axi_p1_WDATA,
        m_axi_p1_WSTRB,
        m_axi_p1_WLAST,
        m_axi_p1_WID,
        m_axi_p1_WUSER,
        m_axi_p1_ARVALID,
        m_axi_p1_ARREADY,
        m_axi_p1_ARADDR,
        m_axi_p1_ARID,
        m_axi_p1_ARLEN,
        m_axi_p1_ARSIZE,
        m_axi_p1_ARBURST,
        m_axi_p1_ARLOCK,
        m_axi_p1_ARCACHE,
        m_axi_p1_ARPROT,
        m_axi_p1_ARQOS,
        m_axi_p1_ARREGION,
        m_axi_p1_ARUSER,
        m_axi_p1_RVALID,
        m_axi_p1_RREADY,
        m_axi_p1_RDATA,
        m_axi_p1_RLAST,
        m_axi_p1_RID,
        m_axi_p1_RFIFONUM,
        m_axi_p1_RUSER,
        m_axi_p1_RRESP,
        m_axi_p1_BVALID,
        m_axi_p1_BREADY,
        m_axi_p1_BRESP,
        m_axi_p1_BID,
        m_axi_p1_BUSER,
        output_r,
        numInputs,
        processDelay,
        ap_clk,
        ap_rst,
        output_r_ap_vld,
        processDelay_ap_vld,
        ap_start,
        input_r_ap_vld,
        numInputs_ap_vld,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


output   m_axi_p0_AWVALID;
input   m_axi_p0_AWREADY;
output  [63:0] m_axi_p0_AWADDR;
output  [0:0] m_axi_p0_AWID;
output  [31:0] m_axi_p0_AWLEN;
output  [2:0] m_axi_p0_AWSIZE;
output  [1:0] m_axi_p0_AWBURST;
output  [1:0] m_axi_p0_AWLOCK;
output  [3:0] m_axi_p0_AWCACHE;
output  [2:0] m_axi_p0_AWPROT;
output  [3:0] m_axi_p0_AWQOS;
output  [3:0] m_axi_p0_AWREGION;
output  [0:0] m_axi_p0_AWUSER;
output   m_axi_p0_WVALID;
input   m_axi_p0_WREADY;
output  [511:0] m_axi_p0_WDATA;
output  [63:0] m_axi_p0_WSTRB;
output   m_axi_p0_WLAST;
output  [0:0] m_axi_p0_WID;
output  [0:0] m_axi_p0_WUSER;
output   m_axi_p0_ARVALID;
input   m_axi_p0_ARREADY;
output  [63:0] m_axi_p0_ARADDR;
output  [0:0] m_axi_p0_ARID;
output  [31:0] m_axi_p0_ARLEN;
output  [2:0] m_axi_p0_ARSIZE;
output  [1:0] m_axi_p0_ARBURST;
output  [1:0] m_axi_p0_ARLOCK;
output  [3:0] m_axi_p0_ARCACHE;
output  [2:0] m_axi_p0_ARPROT;
output  [3:0] m_axi_p0_ARQOS;
output  [3:0] m_axi_p0_ARREGION;
output  [0:0] m_axi_p0_ARUSER;
input   m_axi_p0_RVALID;
output   m_axi_p0_RREADY;
input  [511:0] m_axi_p0_RDATA;
input   m_axi_p0_RLAST;
input  [0:0] m_axi_p0_RID;
input  [8:0] m_axi_p0_RFIFONUM;
input  [0:0] m_axi_p0_RUSER;
input  [1:0] m_axi_p0_RRESP;
input   m_axi_p0_BVALID;
output   m_axi_p0_BREADY;
input  [1:0] m_axi_p0_BRESP;
input  [0:0] m_axi_p0_BID;
input  [0:0] m_axi_p0_BUSER;
input  [63:0] input_r;
output   m_axi_p1_AWVALID;
input   m_axi_p1_AWREADY;
output  [63:0] m_axi_p1_AWADDR;
output  [0:0] m_axi_p1_AWID;
output  [31:0] m_axi_p1_AWLEN;
output  [2:0] m_axi_p1_AWSIZE;
output  [1:0] m_axi_p1_AWBURST;
output  [1:0] m_axi_p1_AWLOCK;
output  [3:0] m_axi_p1_AWCACHE;
output  [2:0] m_axi_p1_AWPROT;
output  [3:0] m_axi_p1_AWQOS;
output  [3:0] m_axi_p1_AWREGION;
output  [0:0] m_axi_p1_AWUSER;
output   m_axi_p1_WVALID;
input   m_axi_p1_WREADY;
output  [511:0] m_axi_p1_WDATA;
output  [63:0] m_axi_p1_WSTRB;
output   m_axi_p1_WLAST;
output  [0:0] m_axi_p1_WID;
output  [0:0] m_axi_p1_WUSER;
output   m_axi_p1_ARVALID;
input   m_axi_p1_ARREADY;
output  [63:0] m_axi_p1_ARADDR;
output  [0:0] m_axi_p1_ARID;
output  [31:0] m_axi_p1_ARLEN;
output  [2:0] m_axi_p1_ARSIZE;
output  [1:0] m_axi_p1_ARBURST;
output  [1:0] m_axi_p1_ARLOCK;
output  [3:0] m_axi_p1_ARCACHE;
output  [2:0] m_axi_p1_ARPROT;
output  [3:0] m_axi_p1_ARQOS;
output  [3:0] m_axi_p1_ARREGION;
output  [0:0] m_axi_p1_ARUSER;
input   m_axi_p1_RVALID;
output   m_axi_p1_RREADY;
input  [511:0] m_axi_p1_RDATA;
input   m_axi_p1_RLAST;
input  [0:0] m_axi_p1_RID;
input  [8:0] m_axi_p1_RFIFONUM;
input  [0:0] m_axi_p1_RUSER;
input  [1:0] m_axi_p1_RRESP;
input   m_axi_p1_BVALID;
output   m_axi_p1_BREADY;
input  [1:0] m_axi_p1_BRESP;
input  [0:0] m_axi_p1_BID;
input  [0:0] m_axi_p1_BUSER;
input  [63:0] output_r;
input  [31:0] numInputs;
input  [31:0] processDelay;
input   ap_clk;
input   ap_rst;
input   output_r_ap_vld;
input   processDelay_ap_vld;
input   ap_start;
input   input_r_ap_vld;
input   numInputs_ap_vld;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    entry_proc_U0_ap_start;
wire    entry_proc_U0_start_full_n;
wire    entry_proc_U0_ap_done;
wire    entry_proc_U0_ap_continue;
wire    entry_proc_U0_ap_idle;
wire    entry_proc_U0_ap_ready;
wire    entry_proc_U0_start_out;
wire    entry_proc_U0_start_write;
wire   [63:0] entry_proc_U0_output_c_din;
wire    entry_proc_U0_output_c_write;
wire   [31:0] entry_proc_U0_processDelay_c_din;
wire    entry_proc_U0_processDelay_c_write;
wire    read_U0_ap_start;
wire    read_U0_ap_done;
wire    read_U0_ap_continue;
wire    read_U0_ap_idle;
wire    read_U0_ap_ready;
wire    read_U0_m_axi_p0_AWVALID;
wire   [63:0] read_U0_m_axi_p0_AWADDR;
wire   [0:0] read_U0_m_axi_p0_AWID;
wire   [31:0] read_U0_m_axi_p0_AWLEN;
wire   [2:0] read_U0_m_axi_p0_AWSIZE;
wire   [1:0] read_U0_m_axi_p0_AWBURST;
wire   [1:0] read_U0_m_axi_p0_AWLOCK;
wire   [3:0] read_U0_m_axi_p0_AWCACHE;
wire   [2:0] read_U0_m_axi_p0_AWPROT;
wire   [3:0] read_U0_m_axi_p0_AWQOS;
wire   [3:0] read_U0_m_axi_p0_AWREGION;
wire   [0:0] read_U0_m_axi_p0_AWUSER;
wire    read_U0_m_axi_p0_WVALID;
wire   [511:0] read_U0_m_axi_p0_WDATA;
wire   [63:0] read_U0_m_axi_p0_WSTRB;
wire    read_U0_m_axi_p0_WLAST;
wire   [0:0] read_U0_m_axi_p0_WID;
wire   [0:0] read_U0_m_axi_p0_WUSER;
wire    read_U0_m_axi_p0_ARVALID;
wire   [63:0] read_U0_m_axi_p0_ARADDR;
wire   [0:0] read_U0_m_axi_p0_ARID;
wire   [31:0] read_U0_m_axi_p0_ARLEN;
wire   [2:0] read_U0_m_axi_p0_ARSIZE;
wire   [1:0] read_U0_m_axi_p0_ARBURST;
wire   [1:0] read_U0_m_axi_p0_ARLOCK;
wire   [3:0] read_U0_m_axi_p0_ARCACHE;
wire   [2:0] read_U0_m_axi_p0_ARPROT;
wire   [3:0] read_U0_m_axi_p0_ARQOS;
wire   [3:0] read_U0_m_axi_p0_ARREGION;
wire   [0:0] read_U0_m_axi_p0_ARUSER;
wire    read_U0_m_axi_p0_RREADY;
wire    read_U0_m_axi_p0_BREADY;
wire   [511:0] read_U0_inStream2_din;
wire    read_U0_inStream2_write;
wire   [31:0] read_U0_numInputs_c9_din;
wire    read_U0_numInputs_c9_write;
wire    exec_U0_ap_start;
wire    exec_U0_ap_done;
wire    exec_U0_ap_continue;
wire    exec_U0_ap_idle;
wire    exec_U0_ap_ready;
wire    exec_U0_inStream2_read;
wire   [511:0] exec_U0_outStream3_din;
wire    exec_U0_outStream3_write;
wire    exec_U0_numInputs_read;
wire    exec_U0_processDelay_read;
wire   [31:0] exec_U0_numInputs_c_din;
wire    exec_U0_numInputs_c_write;
wire    write_U0_ap_start;
wire    write_U0_ap_done;
wire    write_U0_ap_continue;
wire    write_U0_ap_idle;
wire    write_U0_ap_ready;
wire    write_U0_outStream3_read;
wire    write_U0_m_axi_p1_AWVALID;
wire   [63:0] write_U0_m_axi_p1_AWADDR;
wire   [0:0] write_U0_m_axi_p1_AWID;
wire   [31:0] write_U0_m_axi_p1_AWLEN;
wire   [2:0] write_U0_m_axi_p1_AWSIZE;
wire   [1:0] write_U0_m_axi_p1_AWBURST;
wire   [1:0] write_U0_m_axi_p1_AWLOCK;
wire   [3:0] write_U0_m_axi_p1_AWCACHE;
wire   [2:0] write_U0_m_axi_p1_AWPROT;
wire   [3:0] write_U0_m_axi_p1_AWQOS;
wire   [3:0] write_U0_m_axi_p1_AWREGION;
wire   [0:0] write_U0_m_axi_p1_AWUSER;
wire    write_U0_m_axi_p1_WVALID;
wire   [511:0] write_U0_m_axi_p1_WDATA;
wire   [63:0] write_U0_m_axi_p1_WSTRB;
wire    write_U0_m_axi_p1_WLAST;
wire   [0:0] write_U0_m_axi_p1_WID;
wire   [0:0] write_U0_m_axi_p1_WUSER;
wire    write_U0_m_axi_p1_ARVALID;
wire   [63:0] write_U0_m_axi_p1_ARADDR;
wire   [0:0] write_U0_m_axi_p1_ARID;
wire   [31:0] write_U0_m_axi_p1_ARLEN;
wire   [2:0] write_U0_m_axi_p1_ARSIZE;
wire   [1:0] write_U0_m_axi_p1_ARBURST;
wire   [1:0] write_U0_m_axi_p1_ARLOCK;
wire   [3:0] write_U0_m_axi_p1_ARCACHE;
wire   [2:0] write_U0_m_axi_p1_ARPROT;
wire   [3:0] write_U0_m_axi_p1_ARQOS;
wire   [3:0] write_U0_m_axi_p1_ARREGION;
wire   [0:0] write_U0_m_axi_p1_ARUSER;
wire    write_U0_m_axi_p1_RREADY;
wire    write_U0_m_axi_p1_BREADY;
wire    write_U0_output_r_read;
wire    write_U0_numInputs_read;
wire    output_c_full_n;
wire   [63:0] output_c_dout;
wire   [2:0] output_c_num_data_valid;
wire   [2:0] output_c_fifo_cap;
wire    output_c_empty_n;
wire    processDelay_c_full_n;
wire   [31:0] processDelay_c_dout;
wire   [2:0] processDelay_c_num_data_valid;
wire   [2:0] processDelay_c_fifo_cap;
wire    processDelay_c_empty_n;
wire    inStream_full_n;
wire   [511:0] inStream_dout;
wire   [1:0] inStream_num_data_valid;
wire   [1:0] inStream_fifo_cap;
wire    inStream_empty_n;
wire    numInputs_c9_full_n;
wire   [31:0] numInputs_c9_dout;
wire   [1:0] numInputs_c9_num_data_valid;
wire   [1:0] numInputs_c9_fifo_cap;
wire    numInputs_c9_empty_n;
wire    outStream_full_n;
wire   [511:0] outStream_dout;
wire   [1:0] outStream_num_data_valid;
wire   [1:0] outStream_fifo_cap;
wire    outStream_empty_n;
wire    numInputs_c_full_n;
wire   [31:0] numInputs_c_dout;
wire   [1:0] numInputs_c_num_data_valid;
wire   [1:0] numInputs_c_fifo_cap;
wire    numInputs_c_empty_n;
wire    ap_sync_ready;
reg    ap_sync_reg_entry_proc_U0_ap_ready;
wire    ap_sync_entry_proc_U0_ap_ready;
reg    ap_sync_reg_read_U0_ap_ready;
wire    ap_sync_read_U0_ap_ready;
wire   [0:0] start_for_exec_U0_din;
wire    start_for_exec_U0_full_n;
wire   [0:0] start_for_exec_U0_dout;
wire    start_for_exec_U0_empty_n;
wire   [0:0] start_for_write_U0_din;
wire    start_for_write_U0_full_n;
wire   [0:0] start_for_write_U0_dout;
wire    start_for_write_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_entry_proc_U0_ap_ready = 1'b0;
#0 ap_sync_reg_read_U0_ap_ready = 1'b0;
end

pass_entry_proc entry_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(entry_proc_U0_ap_start),
    .start_full_n(entry_proc_U0_start_full_n),
    .ap_done(entry_proc_U0_ap_done),
    .ap_continue(entry_proc_U0_ap_continue),
    .ap_idle(entry_proc_U0_ap_idle),
    .ap_ready(entry_proc_U0_ap_ready),
    .start_out(entry_proc_U0_start_out),
    .start_write(entry_proc_U0_start_write),
    .output_r(output_r),
    .output_c_din(entry_proc_U0_output_c_din),
    .output_c_num_data_valid(output_c_num_data_valid),
    .output_c_fifo_cap(output_c_fifo_cap),
    .output_c_full_n(output_c_full_n),
    .output_c_write(entry_proc_U0_output_c_write),
    .processDelay(processDelay),
    .processDelay_c_din(entry_proc_U0_processDelay_c_din),
    .processDelay_c_num_data_valid(processDelay_c_num_data_valid),
    .processDelay_c_fifo_cap(processDelay_c_fifo_cap),
    .processDelay_c_full_n(processDelay_c_full_n),
    .processDelay_c_write(entry_proc_U0_processDelay_c_write)
);

pass_read_r read_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(read_U0_ap_start),
    .ap_done(read_U0_ap_done),
    .ap_continue(read_U0_ap_continue),
    .ap_idle(read_U0_ap_idle),
    .ap_ready(read_U0_ap_ready),
    .m_axi_p0_AWVALID(read_U0_m_axi_p0_AWVALID),
    .m_axi_p0_AWREADY(1'b0),
    .m_axi_p0_AWADDR(read_U0_m_axi_p0_AWADDR),
    .m_axi_p0_AWID(read_U0_m_axi_p0_AWID),
    .m_axi_p0_AWLEN(read_U0_m_axi_p0_AWLEN),
    .m_axi_p0_AWSIZE(read_U0_m_axi_p0_AWSIZE),
    .m_axi_p0_AWBURST(read_U0_m_axi_p0_AWBURST),
    .m_axi_p0_AWLOCK(read_U0_m_axi_p0_AWLOCK),
    .m_axi_p0_AWCACHE(read_U0_m_axi_p0_AWCACHE),
    .m_axi_p0_AWPROT(read_U0_m_axi_p0_AWPROT),
    .m_axi_p0_AWQOS(read_U0_m_axi_p0_AWQOS),
    .m_axi_p0_AWREGION(read_U0_m_axi_p0_AWREGION),
    .m_axi_p0_AWUSER(read_U0_m_axi_p0_AWUSER),
    .m_axi_p0_WVALID(read_U0_m_axi_p0_WVALID),
    .m_axi_p0_WREADY(1'b0),
    .m_axi_p0_WDATA(read_U0_m_axi_p0_WDATA),
    .m_axi_p0_WSTRB(read_U0_m_axi_p0_WSTRB),
    .m_axi_p0_WLAST(read_U0_m_axi_p0_WLAST),
    .m_axi_p0_WID(read_U0_m_axi_p0_WID),
    .m_axi_p0_WUSER(read_U0_m_axi_p0_WUSER),
    .m_axi_p0_ARVALID(read_U0_m_axi_p0_ARVALID),
    .m_axi_p0_ARREADY(m_axi_p0_ARREADY),
    .m_axi_p0_ARADDR(read_U0_m_axi_p0_ARADDR),
    .m_axi_p0_ARID(read_U0_m_axi_p0_ARID),
    .m_axi_p0_ARLEN(read_U0_m_axi_p0_ARLEN),
    .m_axi_p0_ARSIZE(read_U0_m_axi_p0_ARSIZE),
    .m_axi_p0_ARBURST(read_U0_m_axi_p0_ARBURST),
    .m_axi_p0_ARLOCK(read_U0_m_axi_p0_ARLOCK),
    .m_axi_p0_ARCACHE(read_U0_m_axi_p0_ARCACHE),
    .m_axi_p0_ARPROT(read_U0_m_axi_p0_ARPROT),
    .m_axi_p0_ARQOS(read_U0_m_axi_p0_ARQOS),
    .m_axi_p0_ARREGION(read_U0_m_axi_p0_ARREGION),
    .m_axi_p0_ARUSER(read_U0_m_axi_p0_ARUSER),
    .m_axi_p0_RVALID(m_axi_p0_RVALID),
    .m_axi_p0_RREADY(read_U0_m_axi_p0_RREADY),
    .m_axi_p0_RDATA(m_axi_p0_RDATA),
    .m_axi_p0_RLAST(m_axi_p0_RLAST),
    .m_axi_p0_RID(m_axi_p0_RID),
    .m_axi_p0_RFIFONUM(m_axi_p0_RFIFONUM),
    .m_axi_p0_RUSER(m_axi_p0_RUSER),
    .m_axi_p0_RRESP(m_axi_p0_RRESP),
    .m_axi_p0_BVALID(1'b0),
    .m_axi_p0_BREADY(read_U0_m_axi_p0_BREADY),
    .m_axi_p0_BRESP(2'd0),
    .m_axi_p0_BID(1'd0),
    .m_axi_p0_BUSER(1'd0),
    .input_r(input_r),
    .inStream2_din(read_U0_inStream2_din),
    .inStream2_num_data_valid(inStream_num_data_valid),
    .inStream2_fifo_cap(inStream_fifo_cap),
    .inStream2_full_n(inStream_full_n),
    .inStream2_write(read_U0_inStream2_write),
    .numInputs(numInputs),
    .numInputs_c9_din(read_U0_numInputs_c9_din),
    .numInputs_c9_num_data_valid(numInputs_c9_num_data_valid),
    .numInputs_c9_fifo_cap(numInputs_c9_fifo_cap),
    .numInputs_c9_full_n(numInputs_c9_full_n),
    .numInputs_c9_write(read_U0_numInputs_c9_write)
);

pass_exec exec_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(exec_U0_ap_start),
    .ap_done(exec_U0_ap_done),
    .ap_continue(exec_U0_ap_continue),
    .ap_idle(exec_U0_ap_idle),
    .ap_ready(exec_U0_ap_ready),
    .inStream2_dout(inStream_dout),
    .inStream2_num_data_valid(inStream_num_data_valid),
    .inStream2_fifo_cap(inStream_fifo_cap),
    .inStream2_empty_n(inStream_empty_n),
    .inStream2_read(exec_U0_inStream2_read),
    .outStream3_din(exec_U0_outStream3_din),
    .outStream3_num_data_valid(outStream_num_data_valid),
    .outStream3_fifo_cap(outStream_fifo_cap),
    .outStream3_full_n(outStream_full_n),
    .outStream3_write(exec_U0_outStream3_write),
    .numInputs_dout(numInputs_c9_dout),
    .numInputs_num_data_valid(numInputs_c9_num_data_valid),
    .numInputs_fifo_cap(numInputs_c9_fifo_cap),
    .numInputs_empty_n(numInputs_c9_empty_n),
    .numInputs_read(exec_U0_numInputs_read),
    .processDelay_dout(processDelay_c_dout),
    .processDelay_num_data_valid(processDelay_c_num_data_valid),
    .processDelay_fifo_cap(processDelay_c_fifo_cap),
    .processDelay_empty_n(processDelay_c_empty_n),
    .processDelay_read(exec_U0_processDelay_read),
    .numInputs_c_din(exec_U0_numInputs_c_din),
    .numInputs_c_num_data_valid(numInputs_c_num_data_valid),
    .numInputs_c_fifo_cap(numInputs_c_fifo_cap),
    .numInputs_c_full_n(numInputs_c_full_n),
    .numInputs_c_write(exec_U0_numInputs_c_write)
);

pass_write_r write_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(write_U0_ap_start),
    .ap_done(write_U0_ap_done),
    .ap_continue(write_U0_ap_continue),
    .ap_idle(write_U0_ap_idle),
    .ap_ready(write_U0_ap_ready),
    .outStream3_dout(outStream_dout),
    .outStream3_num_data_valid(outStream_num_data_valid),
    .outStream3_fifo_cap(outStream_fifo_cap),
    .outStream3_empty_n(outStream_empty_n),
    .outStream3_read(write_U0_outStream3_read),
    .m_axi_p1_AWVALID(write_U0_m_axi_p1_AWVALID),
    .m_axi_p1_AWREADY(m_axi_p1_AWREADY),
    .m_axi_p1_AWADDR(write_U0_m_axi_p1_AWADDR),
    .m_axi_p1_AWID(write_U0_m_axi_p1_AWID),
    .m_axi_p1_AWLEN(write_U0_m_axi_p1_AWLEN),
    .m_axi_p1_AWSIZE(write_U0_m_axi_p1_AWSIZE),
    .m_axi_p1_AWBURST(write_U0_m_axi_p1_AWBURST),
    .m_axi_p1_AWLOCK(write_U0_m_axi_p1_AWLOCK),
    .m_axi_p1_AWCACHE(write_U0_m_axi_p1_AWCACHE),
    .m_axi_p1_AWPROT(write_U0_m_axi_p1_AWPROT),
    .m_axi_p1_AWQOS(write_U0_m_axi_p1_AWQOS),
    .m_axi_p1_AWREGION(write_U0_m_axi_p1_AWREGION),
    .m_axi_p1_AWUSER(write_U0_m_axi_p1_AWUSER),
    .m_axi_p1_WVALID(write_U0_m_axi_p1_WVALID),
    .m_axi_p1_WREADY(m_axi_p1_WREADY),
    .m_axi_p1_WDATA(write_U0_m_axi_p1_WDATA),
    .m_axi_p1_WSTRB(write_U0_m_axi_p1_WSTRB),
    .m_axi_p1_WLAST(write_U0_m_axi_p1_WLAST),
    .m_axi_p1_WID(write_U0_m_axi_p1_WID),
    .m_axi_p1_WUSER(write_U0_m_axi_p1_WUSER),
    .m_axi_p1_ARVALID(write_U0_m_axi_p1_ARVALID),
    .m_axi_p1_ARREADY(1'b0),
    .m_axi_p1_ARADDR(write_U0_m_axi_p1_ARADDR),
    .m_axi_p1_ARID(write_U0_m_axi_p1_ARID),
    .m_axi_p1_ARLEN(write_U0_m_axi_p1_ARLEN),
    .m_axi_p1_ARSIZE(write_U0_m_axi_p1_ARSIZE),
    .m_axi_p1_ARBURST(write_U0_m_axi_p1_ARBURST),
    .m_axi_p1_ARLOCK(write_U0_m_axi_p1_ARLOCK),
    .m_axi_p1_ARCACHE(write_U0_m_axi_p1_ARCACHE),
    .m_axi_p1_ARPROT(write_U0_m_axi_p1_ARPROT),
    .m_axi_p1_ARQOS(write_U0_m_axi_p1_ARQOS),
    .m_axi_p1_ARREGION(write_U0_m_axi_p1_ARREGION),
    .m_axi_p1_ARUSER(write_U0_m_axi_p1_ARUSER),
    .m_axi_p1_RVALID(1'b0),
    .m_axi_p1_RREADY(write_U0_m_axi_p1_RREADY),
    .m_axi_p1_RDATA(512'd0),
    .m_axi_p1_RLAST(1'b0),
    .m_axi_p1_RID(1'd0),
    .m_axi_p1_RFIFONUM(9'd0),
    .m_axi_p1_RUSER(1'd0),
    .m_axi_p1_RRESP(2'd0),
    .m_axi_p1_BVALID(m_axi_p1_BVALID),
    .m_axi_p1_BREADY(write_U0_m_axi_p1_BREADY),
    .m_axi_p1_BRESP(m_axi_p1_BRESP),
    .m_axi_p1_BID(m_axi_p1_BID),
    .m_axi_p1_BUSER(m_axi_p1_BUSER),
    .output_r_dout(output_c_dout),
    .output_r_num_data_valid(output_c_num_data_valid),
    .output_r_fifo_cap(output_c_fifo_cap),
    .output_r_empty_n(output_c_empty_n),
    .output_r_read(write_U0_output_r_read),
    .numInputs_dout(numInputs_c_dout),
    .numInputs_num_data_valid(numInputs_c_num_data_valid),
    .numInputs_fifo_cap(numInputs_c_fifo_cap),
    .numInputs_empty_n(numInputs_c_empty_n),
    .numInputs_read(write_U0_numInputs_read)
);

pass_fifo_w64_d4_S output_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_output_c_din),
    .if_full_n(output_c_full_n),
    .if_write(entry_proc_U0_output_c_write),
    .if_dout(output_c_dout),
    .if_num_data_valid(output_c_num_data_valid),
    .if_fifo_cap(output_c_fifo_cap),
    .if_empty_n(output_c_empty_n),
    .if_read(write_U0_output_r_read)
);

pass_fifo_w32_d3_S processDelay_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_processDelay_c_din),
    .if_full_n(processDelay_c_full_n),
    .if_write(entry_proc_U0_processDelay_c_write),
    .if_dout(processDelay_c_dout),
    .if_num_data_valid(processDelay_c_num_data_valid),
    .if_fifo_cap(processDelay_c_fifo_cap),
    .if_empty_n(processDelay_c_empty_n),
    .if_read(exec_U0_processDelay_read)
);

pass_fifo_w512_d2_S inStream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(read_U0_inStream2_din),
    .if_full_n(inStream_full_n),
    .if_write(read_U0_inStream2_write),
    .if_dout(inStream_dout),
    .if_num_data_valid(inStream_num_data_valid),
    .if_fifo_cap(inStream_fifo_cap),
    .if_empty_n(inStream_empty_n),
    .if_read(exec_U0_inStream2_read)
);

pass_fifo_w32_d2_S numInputs_c9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(read_U0_numInputs_c9_din),
    .if_full_n(numInputs_c9_full_n),
    .if_write(read_U0_numInputs_c9_write),
    .if_dout(numInputs_c9_dout),
    .if_num_data_valid(numInputs_c9_num_data_valid),
    .if_fifo_cap(numInputs_c9_fifo_cap),
    .if_empty_n(numInputs_c9_empty_n),
    .if_read(exec_U0_numInputs_read)
);

pass_fifo_w512_d2_S outStream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(exec_U0_outStream3_din),
    .if_full_n(outStream_full_n),
    .if_write(exec_U0_outStream3_write),
    .if_dout(outStream_dout),
    .if_num_data_valid(outStream_num_data_valid),
    .if_fifo_cap(outStream_fifo_cap),
    .if_empty_n(outStream_empty_n),
    .if_read(write_U0_outStream3_read)
);

pass_fifo_w32_d2_S numInputs_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(exec_U0_numInputs_c_din),
    .if_full_n(numInputs_c_full_n),
    .if_write(exec_U0_numInputs_c_write),
    .if_dout(numInputs_c_dout),
    .if_num_data_valid(numInputs_c_num_data_valid),
    .if_fifo_cap(numInputs_c_fifo_cap),
    .if_empty_n(numInputs_c_empty_n),
    .if_read(write_U0_numInputs_read)
);

pass_start_for_exec_U0 start_for_exec_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_exec_U0_din),
    .if_full_n(start_for_exec_U0_full_n),
    .if_write(entry_proc_U0_start_write),
    .if_dout(start_for_exec_U0_dout),
    .if_empty_n(start_for_exec_U0_empty_n),
    .if_read(exec_U0_ap_ready)
);

pass_start_for_write_U0 start_for_write_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_write_U0_din),
    .if_full_n(start_for_write_U0_full_n),
    .if_write(entry_proc_U0_start_write),
    .if_dout(start_for_write_U0_dout),
    .if_empty_n(start_for_write_U0_empty_n),
    .if_read(write_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_read_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_read_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_read_U0_ap_ready <= ap_sync_read_U0_ap_ready;
        end
    end
end

assign ap_done = write_U0_ap_done;

assign ap_idle = (write_U0_ap_idle & read_U0_ap_idle & exec_U0_ap_idle & entry_proc_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_entry_proc_U0_ap_ready = (entry_proc_U0_ap_ready | ap_sync_reg_entry_proc_U0_ap_ready);

assign ap_sync_read_U0_ap_ready = (read_U0_ap_ready | ap_sync_reg_read_U0_ap_ready);

assign ap_sync_ready = (ap_sync_read_U0_ap_ready & ap_sync_entry_proc_U0_ap_ready);

assign entry_proc_U0_ap_continue = 1'b1;

assign entry_proc_U0_ap_start = ((ap_sync_reg_entry_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign entry_proc_U0_start_full_n = (start_for_write_U0_full_n & start_for_exec_U0_full_n);

assign exec_U0_ap_continue = 1'b1;

assign exec_U0_ap_start = start_for_exec_U0_empty_n;

assign m_axi_p0_ARADDR = read_U0_m_axi_p0_ARADDR;

assign m_axi_p0_ARBURST = read_U0_m_axi_p0_ARBURST;

assign m_axi_p0_ARCACHE = read_U0_m_axi_p0_ARCACHE;

assign m_axi_p0_ARID = read_U0_m_axi_p0_ARID;

assign m_axi_p0_ARLEN = read_U0_m_axi_p0_ARLEN;

assign m_axi_p0_ARLOCK = read_U0_m_axi_p0_ARLOCK;

assign m_axi_p0_ARPROT = read_U0_m_axi_p0_ARPROT;

assign m_axi_p0_ARQOS = read_U0_m_axi_p0_ARQOS;

assign m_axi_p0_ARREGION = read_U0_m_axi_p0_ARREGION;

assign m_axi_p0_ARSIZE = read_U0_m_axi_p0_ARSIZE;

assign m_axi_p0_ARUSER = read_U0_m_axi_p0_ARUSER;

assign m_axi_p0_ARVALID = read_U0_m_axi_p0_ARVALID;

assign m_axi_p0_AWADDR = 64'd0;

assign m_axi_p0_AWBURST = 2'd0;

assign m_axi_p0_AWCACHE = 4'd0;

assign m_axi_p0_AWID = 1'd0;

assign m_axi_p0_AWLEN = 32'd0;

assign m_axi_p0_AWLOCK = 2'd0;

assign m_axi_p0_AWPROT = 3'd0;

assign m_axi_p0_AWQOS = 4'd0;

assign m_axi_p0_AWREGION = 4'd0;

assign m_axi_p0_AWSIZE = 3'd0;

assign m_axi_p0_AWUSER = 1'd0;

assign m_axi_p0_AWVALID = 1'b0;

assign m_axi_p0_BREADY = 1'b0;

assign m_axi_p0_RREADY = read_U0_m_axi_p0_RREADY;

assign m_axi_p0_WDATA = 512'd0;

assign m_axi_p0_WID = 1'd0;

assign m_axi_p0_WLAST = 1'b0;

assign m_axi_p0_WSTRB = 64'd0;

assign m_axi_p0_WUSER = 1'd0;

assign m_axi_p0_WVALID = 1'b0;

assign m_axi_p1_ARADDR = 64'd0;

assign m_axi_p1_ARBURST = 2'd0;

assign m_axi_p1_ARCACHE = 4'd0;

assign m_axi_p1_ARID = 1'd0;

assign m_axi_p1_ARLEN = 32'd0;

assign m_axi_p1_ARLOCK = 2'd0;

assign m_axi_p1_ARPROT = 3'd0;

assign m_axi_p1_ARQOS = 4'd0;

assign m_axi_p1_ARREGION = 4'd0;

assign m_axi_p1_ARSIZE = 3'd0;

assign m_axi_p1_ARUSER = 1'd0;

assign m_axi_p1_ARVALID = 1'b0;

assign m_axi_p1_AWADDR = write_U0_m_axi_p1_AWADDR;

assign m_axi_p1_AWBURST = write_U0_m_axi_p1_AWBURST;

assign m_axi_p1_AWCACHE = write_U0_m_axi_p1_AWCACHE;

assign m_axi_p1_AWID = write_U0_m_axi_p1_AWID;

assign m_axi_p1_AWLEN = write_U0_m_axi_p1_AWLEN;

assign m_axi_p1_AWLOCK = write_U0_m_axi_p1_AWLOCK;

assign m_axi_p1_AWPROT = write_U0_m_axi_p1_AWPROT;

assign m_axi_p1_AWQOS = write_U0_m_axi_p1_AWQOS;

assign m_axi_p1_AWREGION = write_U0_m_axi_p1_AWREGION;

assign m_axi_p1_AWSIZE = write_U0_m_axi_p1_AWSIZE;

assign m_axi_p1_AWUSER = write_U0_m_axi_p1_AWUSER;

assign m_axi_p1_AWVALID = write_U0_m_axi_p1_AWVALID;

assign m_axi_p1_BREADY = write_U0_m_axi_p1_BREADY;

assign m_axi_p1_RREADY = 1'b0;

assign m_axi_p1_WDATA = write_U0_m_axi_p1_WDATA;

assign m_axi_p1_WID = write_U0_m_axi_p1_WID;

assign m_axi_p1_WLAST = write_U0_m_axi_p1_WLAST;

assign m_axi_p1_WSTRB = write_U0_m_axi_p1_WSTRB;

assign m_axi_p1_WUSER = write_U0_m_axi_p1_WUSER;

assign m_axi_p1_WVALID = write_U0_m_axi_p1_WVALID;

assign read_U0_ap_continue = 1'b1;

assign read_U0_ap_start = ((ap_sync_reg_read_U0_ap_ready ^ 1'b1) & ap_start);

assign start_for_exec_U0_din = 1'b1;

assign start_for_write_U0_din = 1'b1;

assign write_U0_ap_continue = ap_continue;

assign write_U0_ap_start = start_for_write_U0_empty_n;

endmodule //pass_pass_dataflow
