// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pass_pass,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.433090,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=14909,HLS_SYN_LUT=19939,HLS_VERSION=2022_1}" *)

module pass (
        ap_clk,
        ap_rst_n,
        m_axi_p0_AWVALID,
        m_axi_p0_AWREADY,
        m_axi_p0_AWADDR,
        m_axi_p0_AWID,
        m_axi_p0_AWLEN,
        m_axi_p0_AWSIZE,
        m_axi_p0_AWBURST,
        m_axi_p0_AWLOCK,
        m_axi_p0_AWCACHE,
        m_axi_p0_AWPROT,
        m_axi_p0_AWQOS,
        m_axi_p0_AWREGION,
        m_axi_p0_AWUSER,
        m_axi_p0_WVALID,
        m_axi_p0_WREADY,
        m_axi_p0_WDATA,
        m_axi_p0_WSTRB,
        m_axi_p0_WLAST,
        m_axi_p0_WID,
        m_axi_p0_WUSER,
        m_axi_p0_ARVALID,
        m_axi_p0_ARREADY,
        m_axi_p0_ARADDR,
        m_axi_p0_ARID,
        m_axi_p0_ARLEN,
        m_axi_p0_ARSIZE,
        m_axi_p0_ARBURST,
        m_axi_p0_ARLOCK,
        m_axi_p0_ARCACHE,
        m_axi_p0_ARPROT,
        m_axi_p0_ARQOS,
        m_axi_p0_ARREGION,
        m_axi_p0_ARUSER,
        m_axi_p0_RVALID,
        m_axi_p0_RREADY,
        m_axi_p0_RDATA,
        m_axi_p0_RLAST,
        m_axi_p0_RID,
        m_axi_p0_RUSER,
        m_axi_p0_RRESP,
        m_axi_p0_BVALID,
        m_axi_p0_BREADY,
        m_axi_p0_BRESP,
        m_axi_p0_BID,
        m_axi_p0_BUSER,
        m_axi_p1_AWVALID,
        m_axi_p1_AWREADY,
        m_axi_p1_AWADDR,
        m_axi_p1_AWID,
        m_axi_p1_AWLEN,
        m_axi_p1_AWSIZE,
        m_axi_p1_AWBURST,
        m_axi_p1_AWLOCK,
        m_axi_p1_AWCACHE,
        m_axi_p1_AWPROT,
        m_axi_p1_AWQOS,
        m_axi_p1_AWREGION,
        m_axi_p1_AWUSER,
        m_axi_p1_WVALID,
        m_axi_p1_WREADY,
        m_axi_p1_WDATA,
        m_axi_p1_WSTRB,
        m_axi_p1_WLAST,
        m_axi_p1_WID,
        m_axi_p1_WUSER,
        m_axi_p1_ARVALID,
        m_axi_p1_ARREADY,
        m_axi_p1_ARADDR,
        m_axi_p1_ARID,
        m_axi_p1_ARLEN,
        m_axi_p1_ARSIZE,
        m_axi_p1_ARBURST,
        m_axi_p1_ARLOCK,
        m_axi_p1_ARCACHE,
        m_axi_p1_ARPROT,
        m_axi_p1_ARQOS,
        m_axi_p1_ARREGION,
        m_axi_p1_ARUSER,
        m_axi_p1_RVALID,
        m_axi_p1_RREADY,
        m_axi_p1_RDATA,
        m_axi_p1_RLAST,
        m_axi_p1_RID,
        m_axi_p1_RUSER,
        m_axi_p1_RRESP,
        m_axi_p1_BVALID,
        m_axi_p1_BREADY,
        m_axi_p1_BRESP,
        m_axi_p1_BID,
        m_axi_p1_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_P0_ID_WIDTH = 1;
parameter    C_M_AXI_P0_ADDR_WIDTH = 64;
parameter    C_M_AXI_P0_DATA_WIDTH = 512;
parameter    C_M_AXI_P0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_P0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_P0_WUSER_WIDTH = 1;
parameter    C_M_AXI_P0_RUSER_WIDTH = 1;
parameter    C_M_AXI_P0_BUSER_WIDTH = 1;
parameter    C_M_AXI_P0_USER_VALUE = 0;
parameter    C_M_AXI_P0_PROT_VALUE = 0;
parameter    C_M_AXI_P0_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_P1_ID_WIDTH = 1;
parameter    C_M_AXI_P1_ADDR_WIDTH = 64;
parameter    C_M_AXI_P1_DATA_WIDTH = 512;
parameter    C_M_AXI_P1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_P1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_P1_WUSER_WIDTH = 1;
parameter    C_M_AXI_P1_RUSER_WIDTH = 1;
parameter    C_M_AXI_P1_BUSER_WIDTH = 1;
parameter    C_M_AXI_P1_USER_VALUE = 0;
parameter    C_M_AXI_P1_PROT_VALUE = 0;
parameter    C_M_AXI_P1_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_P0_WSTRB_WIDTH = (512 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_P1_WSTRB_WIDTH = (512 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_p0_AWVALID;
input   m_axi_p0_AWREADY;
output  [C_M_AXI_P0_ADDR_WIDTH - 1:0] m_axi_p0_AWADDR;
output  [C_M_AXI_P0_ID_WIDTH - 1:0] m_axi_p0_AWID;
output  [7:0] m_axi_p0_AWLEN;
output  [2:0] m_axi_p0_AWSIZE;
output  [1:0] m_axi_p0_AWBURST;
output  [1:0] m_axi_p0_AWLOCK;
output  [3:0] m_axi_p0_AWCACHE;
output  [2:0] m_axi_p0_AWPROT;
output  [3:0] m_axi_p0_AWQOS;
output  [3:0] m_axi_p0_AWREGION;
output  [C_M_AXI_P0_AWUSER_WIDTH - 1:0] m_axi_p0_AWUSER;
output   m_axi_p0_WVALID;
input   m_axi_p0_WREADY;
output  [C_M_AXI_P0_DATA_WIDTH - 1:0] m_axi_p0_WDATA;
output  [C_M_AXI_P0_WSTRB_WIDTH - 1:0] m_axi_p0_WSTRB;
output   m_axi_p0_WLAST;
output  [C_M_AXI_P0_ID_WIDTH - 1:0] m_axi_p0_WID;
output  [C_M_AXI_P0_WUSER_WIDTH - 1:0] m_axi_p0_WUSER;
output   m_axi_p0_ARVALID;
input   m_axi_p0_ARREADY;
output  [C_M_AXI_P0_ADDR_WIDTH - 1:0] m_axi_p0_ARADDR;
output  [C_M_AXI_P0_ID_WIDTH - 1:0] m_axi_p0_ARID;
output  [7:0] m_axi_p0_ARLEN;
output  [2:0] m_axi_p0_ARSIZE;
output  [1:0] m_axi_p0_ARBURST;
output  [1:0] m_axi_p0_ARLOCK;
output  [3:0] m_axi_p0_ARCACHE;
output  [2:0] m_axi_p0_ARPROT;
output  [3:0] m_axi_p0_ARQOS;
output  [3:0] m_axi_p0_ARREGION;
output  [C_M_AXI_P0_ARUSER_WIDTH - 1:0] m_axi_p0_ARUSER;
input   m_axi_p0_RVALID;
output   m_axi_p0_RREADY;
input  [C_M_AXI_P0_DATA_WIDTH - 1:0] m_axi_p0_RDATA;
input   m_axi_p0_RLAST;
input  [C_M_AXI_P0_ID_WIDTH - 1:0] m_axi_p0_RID;
input  [C_M_AXI_P0_RUSER_WIDTH - 1:0] m_axi_p0_RUSER;
input  [1:0] m_axi_p0_RRESP;
input   m_axi_p0_BVALID;
output   m_axi_p0_BREADY;
input  [1:0] m_axi_p0_BRESP;
input  [C_M_AXI_P0_ID_WIDTH - 1:0] m_axi_p0_BID;
input  [C_M_AXI_P0_BUSER_WIDTH - 1:0] m_axi_p0_BUSER;
output   m_axi_p1_AWVALID;
input   m_axi_p1_AWREADY;
output  [C_M_AXI_P1_ADDR_WIDTH - 1:0] m_axi_p1_AWADDR;
output  [C_M_AXI_P1_ID_WIDTH - 1:0] m_axi_p1_AWID;
output  [7:0] m_axi_p1_AWLEN;
output  [2:0] m_axi_p1_AWSIZE;
output  [1:0] m_axi_p1_AWBURST;
output  [1:0] m_axi_p1_AWLOCK;
output  [3:0] m_axi_p1_AWCACHE;
output  [2:0] m_axi_p1_AWPROT;
output  [3:0] m_axi_p1_AWQOS;
output  [3:0] m_axi_p1_AWREGION;
output  [C_M_AXI_P1_AWUSER_WIDTH - 1:0] m_axi_p1_AWUSER;
output   m_axi_p1_WVALID;
input   m_axi_p1_WREADY;
output  [C_M_AXI_P1_DATA_WIDTH - 1:0] m_axi_p1_WDATA;
output  [C_M_AXI_P1_WSTRB_WIDTH - 1:0] m_axi_p1_WSTRB;
output   m_axi_p1_WLAST;
output  [C_M_AXI_P1_ID_WIDTH - 1:0] m_axi_p1_WID;
output  [C_M_AXI_P1_WUSER_WIDTH - 1:0] m_axi_p1_WUSER;
output   m_axi_p1_ARVALID;
input   m_axi_p1_ARREADY;
output  [C_M_AXI_P1_ADDR_WIDTH - 1:0] m_axi_p1_ARADDR;
output  [C_M_AXI_P1_ID_WIDTH - 1:0] m_axi_p1_ARID;
output  [7:0] m_axi_p1_ARLEN;
output  [2:0] m_axi_p1_ARSIZE;
output  [1:0] m_axi_p1_ARBURST;
output  [1:0] m_axi_p1_ARLOCK;
output  [3:0] m_axi_p1_ARCACHE;
output  [2:0] m_axi_p1_ARPROT;
output  [3:0] m_axi_p1_ARQOS;
output  [3:0] m_axi_p1_ARREGION;
output  [C_M_AXI_P1_ARUSER_WIDTH - 1:0] m_axi_p1_ARUSER;
input   m_axi_p1_RVALID;
output   m_axi_p1_RREADY;
input  [C_M_AXI_P1_DATA_WIDTH - 1:0] m_axi_p1_RDATA;
input   m_axi_p1_RLAST;
input  [C_M_AXI_P1_ID_WIDTH - 1:0] m_axi_p1_RID;
input  [C_M_AXI_P1_RUSER_WIDTH - 1:0] m_axi_p1_RUSER;
input  [1:0] m_axi_p1_RRESP;
input   m_axi_p1_BVALID;
output   m_axi_p1_BREADY;
input  [1:0] m_axi_p1_BRESP;
input  [C_M_AXI_P1_ID_WIDTH - 1:0] m_axi_p1_BID;
input  [C_M_AXI_P1_BUSER_WIDTH - 1:0] m_axi_p1_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] input_r;
wire   [63:0] output_r;
wire   [31:0] numInputs;
wire   [31:0] processDelay;
reg   [63:0] output_r_read_reg_110;
reg   [63:0] input_r_read_reg_115;
wire    grp_pass_dataflow_fu_88_m_axi_p0_AWVALID;
wire   [63:0] grp_pass_dataflow_fu_88_m_axi_p0_AWADDR;
wire   [0:0] grp_pass_dataflow_fu_88_m_axi_p0_AWID;
wire   [31:0] grp_pass_dataflow_fu_88_m_axi_p0_AWLEN;
wire   [2:0] grp_pass_dataflow_fu_88_m_axi_p0_AWSIZE;
wire   [1:0] grp_pass_dataflow_fu_88_m_axi_p0_AWBURST;
wire   [1:0] grp_pass_dataflow_fu_88_m_axi_p0_AWLOCK;
wire   [3:0] grp_pass_dataflow_fu_88_m_axi_p0_AWCACHE;
wire   [2:0] grp_pass_dataflow_fu_88_m_axi_p0_AWPROT;
wire   [3:0] grp_pass_dataflow_fu_88_m_axi_p0_AWQOS;
wire   [3:0] grp_pass_dataflow_fu_88_m_axi_p0_AWREGION;
wire   [0:0] grp_pass_dataflow_fu_88_m_axi_p0_AWUSER;
wire    grp_pass_dataflow_fu_88_m_axi_p0_WVALID;
wire   [511:0] grp_pass_dataflow_fu_88_m_axi_p0_WDATA;
wire   [63:0] grp_pass_dataflow_fu_88_m_axi_p0_WSTRB;
wire    grp_pass_dataflow_fu_88_m_axi_p0_WLAST;
wire   [0:0] grp_pass_dataflow_fu_88_m_axi_p0_WID;
wire   [0:0] grp_pass_dataflow_fu_88_m_axi_p0_WUSER;
wire    grp_pass_dataflow_fu_88_m_axi_p0_ARVALID;
wire   [63:0] grp_pass_dataflow_fu_88_m_axi_p0_ARADDR;
wire   [0:0] grp_pass_dataflow_fu_88_m_axi_p0_ARID;
wire   [31:0] grp_pass_dataflow_fu_88_m_axi_p0_ARLEN;
wire   [2:0] grp_pass_dataflow_fu_88_m_axi_p0_ARSIZE;
wire   [1:0] grp_pass_dataflow_fu_88_m_axi_p0_ARBURST;
wire   [1:0] grp_pass_dataflow_fu_88_m_axi_p0_ARLOCK;
wire   [3:0] grp_pass_dataflow_fu_88_m_axi_p0_ARCACHE;
wire   [2:0] grp_pass_dataflow_fu_88_m_axi_p0_ARPROT;
wire   [3:0] grp_pass_dataflow_fu_88_m_axi_p0_ARQOS;
wire   [3:0] grp_pass_dataflow_fu_88_m_axi_p0_ARREGION;
wire   [0:0] grp_pass_dataflow_fu_88_m_axi_p0_ARUSER;
wire    grp_pass_dataflow_fu_88_m_axi_p0_RREADY;
wire    grp_pass_dataflow_fu_88_m_axi_p0_BREADY;
wire    grp_pass_dataflow_fu_88_m_axi_p1_AWVALID;
wire   [63:0] grp_pass_dataflow_fu_88_m_axi_p1_AWADDR;
wire   [0:0] grp_pass_dataflow_fu_88_m_axi_p1_AWID;
wire   [31:0] grp_pass_dataflow_fu_88_m_axi_p1_AWLEN;
wire   [2:0] grp_pass_dataflow_fu_88_m_axi_p1_AWSIZE;
wire   [1:0] grp_pass_dataflow_fu_88_m_axi_p1_AWBURST;
wire   [1:0] grp_pass_dataflow_fu_88_m_axi_p1_AWLOCK;
wire   [3:0] grp_pass_dataflow_fu_88_m_axi_p1_AWCACHE;
wire   [2:0] grp_pass_dataflow_fu_88_m_axi_p1_AWPROT;
wire   [3:0] grp_pass_dataflow_fu_88_m_axi_p1_AWQOS;
wire   [3:0] grp_pass_dataflow_fu_88_m_axi_p1_AWREGION;
wire   [0:0] grp_pass_dataflow_fu_88_m_axi_p1_AWUSER;
wire    grp_pass_dataflow_fu_88_m_axi_p1_WVALID;
wire   [511:0] grp_pass_dataflow_fu_88_m_axi_p1_WDATA;
wire   [63:0] grp_pass_dataflow_fu_88_m_axi_p1_WSTRB;
wire    grp_pass_dataflow_fu_88_m_axi_p1_WLAST;
wire   [0:0] grp_pass_dataflow_fu_88_m_axi_p1_WID;
wire   [0:0] grp_pass_dataflow_fu_88_m_axi_p1_WUSER;
wire    grp_pass_dataflow_fu_88_m_axi_p1_ARVALID;
wire   [63:0] grp_pass_dataflow_fu_88_m_axi_p1_ARADDR;
wire   [0:0] grp_pass_dataflow_fu_88_m_axi_p1_ARID;
wire   [31:0] grp_pass_dataflow_fu_88_m_axi_p1_ARLEN;
wire   [2:0] grp_pass_dataflow_fu_88_m_axi_p1_ARSIZE;
wire   [1:0] grp_pass_dataflow_fu_88_m_axi_p1_ARBURST;
wire   [1:0] grp_pass_dataflow_fu_88_m_axi_p1_ARLOCK;
wire   [3:0] grp_pass_dataflow_fu_88_m_axi_p1_ARCACHE;
wire   [2:0] grp_pass_dataflow_fu_88_m_axi_p1_ARPROT;
wire   [3:0] grp_pass_dataflow_fu_88_m_axi_p1_ARQOS;
wire   [3:0] grp_pass_dataflow_fu_88_m_axi_p1_ARREGION;
wire   [0:0] grp_pass_dataflow_fu_88_m_axi_p1_ARUSER;
wire    grp_pass_dataflow_fu_88_m_axi_p1_RREADY;
wire    grp_pass_dataflow_fu_88_m_axi_p1_BREADY;
wire    grp_pass_dataflow_fu_88_ap_start;
wire    grp_pass_dataflow_fu_88_ap_done;
wire    grp_pass_dataflow_fu_88_ap_ready;
wire    grp_pass_dataflow_fu_88_ap_idle;
reg    grp_pass_dataflow_fu_88_ap_continue;
wire    p0_AWREADY;
wire    p0_WREADY;
reg    p0_ARVALID;
wire    p0_ARREADY;
wire    p0_RVALID;
reg    p0_RREADY;
wire   [511:0] p0_RDATA;
wire   [8:0] p0_RFIFONUM;
wire    p0_BVALID;
reg    p1_AWVALID;
wire    p1_AWREADY;
reg    p1_WVALID;
wire    p1_WREADY;
wire    p1_ARREADY;
wire    p1_RVALID;
wire   [511:0] p1_RDATA;
wire   [8:0] p1_RFIFONUM;
wire    p1_BVALID;
reg    p1_BREADY;
reg    grp_pass_dataflow_fu_88_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_sync_grp_pass_dataflow_fu_88_ap_ready;
wire    ap_sync_grp_pass_dataflow_fu_88_ap_done;
reg    ap_block_state3_on_subcall_done;
reg    ap_sync_reg_grp_pass_dataflow_fu_88_ap_ready;
reg    ap_sync_reg_grp_pass_dataflow_fu_88_ap_done;
reg    ap_block_state1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_pass_dataflow_fu_88_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_pass_dataflow_fu_88_ap_ready = 1'b0;
#0 ap_sync_reg_grp_pass_dataflow_fu_88_ap_done = 1'b0;
end

pass_pass_dataflow grp_pass_dataflow_fu_88(
    .m_axi_p0_AWVALID(grp_pass_dataflow_fu_88_m_axi_p0_AWVALID),
    .m_axi_p0_AWREADY(1'b0),
    .m_axi_p0_AWADDR(grp_pass_dataflow_fu_88_m_axi_p0_AWADDR),
    .m_axi_p0_AWID(grp_pass_dataflow_fu_88_m_axi_p0_AWID),
    .m_axi_p0_AWLEN(grp_pass_dataflow_fu_88_m_axi_p0_AWLEN),
    .m_axi_p0_AWSIZE(grp_pass_dataflow_fu_88_m_axi_p0_AWSIZE),
    .m_axi_p0_AWBURST(grp_pass_dataflow_fu_88_m_axi_p0_AWBURST),
    .m_axi_p0_AWLOCK(grp_pass_dataflow_fu_88_m_axi_p0_AWLOCK),
    .m_axi_p0_AWCACHE(grp_pass_dataflow_fu_88_m_axi_p0_AWCACHE),
    .m_axi_p0_AWPROT(grp_pass_dataflow_fu_88_m_axi_p0_AWPROT),
    .m_axi_p0_AWQOS(grp_pass_dataflow_fu_88_m_axi_p0_AWQOS),
    .m_axi_p0_AWREGION(grp_pass_dataflow_fu_88_m_axi_p0_AWREGION),
    .m_axi_p0_AWUSER(grp_pass_dataflow_fu_88_m_axi_p0_AWUSER),
    .m_axi_p0_WVALID(grp_pass_dataflow_fu_88_m_axi_p0_WVALID),
    .m_axi_p0_WREADY(1'b0),
    .m_axi_p0_WDATA(grp_pass_dataflow_fu_88_m_axi_p0_WDATA),
    .m_axi_p0_WSTRB(grp_pass_dataflow_fu_88_m_axi_p0_WSTRB),
    .m_axi_p0_WLAST(grp_pass_dataflow_fu_88_m_axi_p0_WLAST),
    .m_axi_p0_WID(grp_pass_dataflow_fu_88_m_axi_p0_WID),
    .m_axi_p0_WUSER(grp_pass_dataflow_fu_88_m_axi_p0_WUSER),
    .m_axi_p0_ARVALID(grp_pass_dataflow_fu_88_m_axi_p0_ARVALID),
    .m_axi_p0_ARREADY(p0_ARREADY),
    .m_axi_p0_ARADDR(grp_pass_dataflow_fu_88_m_axi_p0_ARADDR),
    .m_axi_p0_ARID(grp_pass_dataflow_fu_88_m_axi_p0_ARID),
    .m_axi_p0_ARLEN(grp_pass_dataflow_fu_88_m_axi_p0_ARLEN),
    .m_axi_p0_ARSIZE(grp_pass_dataflow_fu_88_m_axi_p0_ARSIZE),
    .m_axi_p0_ARBURST(grp_pass_dataflow_fu_88_m_axi_p0_ARBURST),
    .m_axi_p0_ARLOCK(grp_pass_dataflow_fu_88_m_axi_p0_ARLOCK),
    .m_axi_p0_ARCACHE(grp_pass_dataflow_fu_88_m_axi_p0_ARCACHE),
    .m_axi_p0_ARPROT(grp_pass_dataflow_fu_88_m_axi_p0_ARPROT),
    .m_axi_p0_ARQOS(grp_pass_dataflow_fu_88_m_axi_p0_ARQOS),
    .m_axi_p0_ARREGION(grp_pass_dataflow_fu_88_m_axi_p0_ARREGION),
    .m_axi_p0_ARUSER(grp_pass_dataflow_fu_88_m_axi_p0_ARUSER),
    .m_axi_p0_RVALID(p0_RVALID),
    .m_axi_p0_RREADY(grp_pass_dataflow_fu_88_m_axi_p0_RREADY),
    .m_axi_p0_RDATA(p0_RDATA),
    .m_axi_p0_RLAST(1'b0),
    .m_axi_p0_RID(1'd0),
    .m_axi_p0_RFIFONUM(p0_RFIFONUM),
    .m_axi_p0_RUSER(1'd0),
    .m_axi_p0_RRESP(2'd0),
    .m_axi_p0_BVALID(1'b0),
    .m_axi_p0_BREADY(grp_pass_dataflow_fu_88_m_axi_p0_BREADY),
    .m_axi_p0_BRESP(2'd0),
    .m_axi_p0_BID(1'd0),
    .m_axi_p0_BUSER(1'd0),
    .input_r(input_r_read_reg_115),
    .m_axi_p1_AWVALID(grp_pass_dataflow_fu_88_m_axi_p1_AWVALID),
    .m_axi_p1_AWREADY(p1_AWREADY),
    .m_axi_p1_AWADDR(grp_pass_dataflow_fu_88_m_axi_p1_AWADDR),
    .m_axi_p1_AWID(grp_pass_dataflow_fu_88_m_axi_p1_AWID),
    .m_axi_p1_AWLEN(grp_pass_dataflow_fu_88_m_axi_p1_AWLEN),
    .m_axi_p1_AWSIZE(grp_pass_dataflow_fu_88_m_axi_p1_AWSIZE),
    .m_axi_p1_AWBURST(grp_pass_dataflow_fu_88_m_axi_p1_AWBURST),
    .m_axi_p1_AWLOCK(grp_pass_dataflow_fu_88_m_axi_p1_AWLOCK),
    .m_axi_p1_AWCACHE(grp_pass_dataflow_fu_88_m_axi_p1_AWCACHE),
    .m_axi_p1_AWPROT(grp_pass_dataflow_fu_88_m_axi_p1_AWPROT),
    .m_axi_p1_AWQOS(grp_pass_dataflow_fu_88_m_axi_p1_AWQOS),
    .m_axi_p1_AWREGION(grp_pass_dataflow_fu_88_m_axi_p1_AWREGION),
    .m_axi_p1_AWUSER(grp_pass_dataflow_fu_88_m_axi_p1_AWUSER),
    .m_axi_p1_WVALID(grp_pass_dataflow_fu_88_m_axi_p1_WVALID),
    .m_axi_p1_WREADY(p1_WREADY),
    .m_axi_p1_WDATA(grp_pass_dataflow_fu_88_m_axi_p1_WDATA),
    .m_axi_p1_WSTRB(grp_pass_dataflow_fu_88_m_axi_p1_WSTRB),
    .m_axi_p1_WLAST(grp_pass_dataflow_fu_88_m_axi_p1_WLAST),
    .m_axi_p1_WID(grp_pass_dataflow_fu_88_m_axi_p1_WID),
    .m_axi_p1_WUSER(grp_pass_dataflow_fu_88_m_axi_p1_WUSER),
    .m_axi_p1_ARVALID(grp_pass_dataflow_fu_88_m_axi_p1_ARVALID),
    .m_axi_p1_ARREADY(1'b0),
    .m_axi_p1_ARADDR(grp_pass_dataflow_fu_88_m_axi_p1_ARADDR),
    .m_axi_p1_ARID(grp_pass_dataflow_fu_88_m_axi_p1_ARID),
    .m_axi_p1_ARLEN(grp_pass_dataflow_fu_88_m_axi_p1_ARLEN),
    .m_axi_p1_ARSIZE(grp_pass_dataflow_fu_88_m_axi_p1_ARSIZE),
    .m_axi_p1_ARBURST(grp_pass_dataflow_fu_88_m_axi_p1_ARBURST),
    .m_axi_p1_ARLOCK(grp_pass_dataflow_fu_88_m_axi_p1_ARLOCK),
    .m_axi_p1_ARCACHE(grp_pass_dataflow_fu_88_m_axi_p1_ARCACHE),
    .m_axi_p1_ARPROT(grp_pass_dataflow_fu_88_m_axi_p1_ARPROT),
    .m_axi_p1_ARQOS(grp_pass_dataflow_fu_88_m_axi_p1_ARQOS),
    .m_axi_p1_ARREGION(grp_pass_dataflow_fu_88_m_axi_p1_ARREGION),
    .m_axi_p1_ARUSER(grp_pass_dataflow_fu_88_m_axi_p1_ARUSER),
    .m_axi_p1_RVALID(1'b0),
    .m_axi_p1_RREADY(grp_pass_dataflow_fu_88_m_axi_p1_RREADY),
    .m_axi_p1_RDATA(512'd0),
    .m_axi_p1_RLAST(1'b0),
    .m_axi_p1_RID(1'd0),
    .m_axi_p1_RFIFONUM(9'd0),
    .m_axi_p1_RUSER(1'd0),
    .m_axi_p1_RRESP(2'd0),
    .m_axi_p1_BVALID(p1_BVALID),
    .m_axi_p1_BREADY(grp_pass_dataflow_fu_88_m_axi_p1_BREADY),
    .m_axi_p1_BRESP(2'd0),
    .m_axi_p1_BID(1'd0),
    .m_axi_p1_BUSER(1'd0),
    .output_r(output_r_read_reg_110),
    .numInputs(numInputs),
    .processDelay(processDelay),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .output_r_ap_vld(1'b1),
    .processDelay_ap_vld(1'b1),
    .ap_start(grp_pass_dataflow_fu_88_ap_start),
    .input_r_ap_vld(1'b1),
    .numInputs_ap_vld(1'b1),
    .ap_done(grp_pass_dataflow_fu_88_ap_done),
    .ap_ready(grp_pass_dataflow_fu_88_ap_ready),
    .ap_idle(grp_pass_dataflow_fu_88_ap_idle),
    .ap_continue(grp_pass_dataflow_fu_88_ap_continue)
);

pass_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .input_r(input_r),
    .output_r(output_r),
    .numInputs(numInputs),
    .processDelay(processDelay),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

pass_p0_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_P0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_P0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_P0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_P0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_P0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_P0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_P0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_P0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_P0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_P0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_P0_CACHE_VALUE ),
    .USER_DW( 512 ),
    .USER_AW( 64 ))
p0_m_axi_U(
    .AWVALID(m_axi_p0_AWVALID),
    .AWREADY(m_axi_p0_AWREADY),
    .AWADDR(m_axi_p0_AWADDR),
    .AWID(m_axi_p0_AWID),
    .AWLEN(m_axi_p0_AWLEN),
    .AWSIZE(m_axi_p0_AWSIZE),
    .AWBURST(m_axi_p0_AWBURST),
    .AWLOCK(m_axi_p0_AWLOCK),
    .AWCACHE(m_axi_p0_AWCACHE),
    .AWPROT(m_axi_p0_AWPROT),
    .AWQOS(m_axi_p0_AWQOS),
    .AWREGION(m_axi_p0_AWREGION),
    .AWUSER(m_axi_p0_AWUSER),
    .WVALID(m_axi_p0_WVALID),
    .WREADY(m_axi_p0_WREADY),
    .WDATA(m_axi_p0_WDATA),
    .WSTRB(m_axi_p0_WSTRB),
    .WLAST(m_axi_p0_WLAST),
    .WID(m_axi_p0_WID),
    .WUSER(m_axi_p0_WUSER),
    .ARVALID(m_axi_p0_ARVALID),
    .ARREADY(m_axi_p0_ARREADY),
    .ARADDR(m_axi_p0_ARADDR),
    .ARID(m_axi_p0_ARID),
    .ARLEN(m_axi_p0_ARLEN),
    .ARSIZE(m_axi_p0_ARSIZE),
    .ARBURST(m_axi_p0_ARBURST),
    .ARLOCK(m_axi_p0_ARLOCK),
    .ARCACHE(m_axi_p0_ARCACHE),
    .ARPROT(m_axi_p0_ARPROT),
    .ARQOS(m_axi_p0_ARQOS),
    .ARREGION(m_axi_p0_ARREGION),
    .ARUSER(m_axi_p0_ARUSER),
    .RVALID(m_axi_p0_RVALID),
    .RREADY(m_axi_p0_RREADY),
    .RDATA(m_axi_p0_RDATA),
    .RLAST(m_axi_p0_RLAST),
    .RID(m_axi_p0_RID),
    .RUSER(m_axi_p0_RUSER),
    .RRESP(m_axi_p0_RRESP),
    .BVALID(m_axi_p0_BVALID),
    .BREADY(m_axi_p0_BREADY),
    .BRESP(m_axi_p0_BRESP),
    .BID(m_axi_p0_BID),
    .BUSER(m_axi_p0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(p0_ARVALID),
    .I_ARREADY(p0_ARREADY),
    .I_ARADDR(grp_pass_dataflow_fu_88_m_axi_p0_ARADDR),
    .I_ARLEN(grp_pass_dataflow_fu_88_m_axi_p0_ARLEN),
    .I_RVALID(p0_RVALID),
    .I_RREADY(p0_RREADY),
    .I_RDATA(p0_RDATA),
    .I_RFIFONUM(p0_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(p0_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(p0_WREADY),
    .I_WDATA(512'd0),
    .I_WSTRB(64'd0),
    .I_BVALID(p0_BVALID),
    .I_BREADY(1'b0)
);

pass_p1_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_P1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_P1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_P1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_P1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_P1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_P1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_P1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_P1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_P1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_P1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_P1_CACHE_VALUE ),
    .USER_DW( 512 ),
    .USER_AW( 64 ))
p1_m_axi_U(
    .AWVALID(m_axi_p1_AWVALID),
    .AWREADY(m_axi_p1_AWREADY),
    .AWADDR(m_axi_p1_AWADDR),
    .AWID(m_axi_p1_AWID),
    .AWLEN(m_axi_p1_AWLEN),
    .AWSIZE(m_axi_p1_AWSIZE),
    .AWBURST(m_axi_p1_AWBURST),
    .AWLOCK(m_axi_p1_AWLOCK),
    .AWCACHE(m_axi_p1_AWCACHE),
    .AWPROT(m_axi_p1_AWPROT),
    .AWQOS(m_axi_p1_AWQOS),
    .AWREGION(m_axi_p1_AWREGION),
    .AWUSER(m_axi_p1_AWUSER),
    .WVALID(m_axi_p1_WVALID),
    .WREADY(m_axi_p1_WREADY),
    .WDATA(m_axi_p1_WDATA),
    .WSTRB(m_axi_p1_WSTRB),
    .WLAST(m_axi_p1_WLAST),
    .WID(m_axi_p1_WID),
    .WUSER(m_axi_p1_WUSER),
    .ARVALID(m_axi_p1_ARVALID),
    .ARREADY(m_axi_p1_ARREADY),
    .ARADDR(m_axi_p1_ARADDR),
    .ARID(m_axi_p1_ARID),
    .ARLEN(m_axi_p1_ARLEN),
    .ARSIZE(m_axi_p1_ARSIZE),
    .ARBURST(m_axi_p1_ARBURST),
    .ARLOCK(m_axi_p1_ARLOCK),
    .ARCACHE(m_axi_p1_ARCACHE),
    .ARPROT(m_axi_p1_ARPROT),
    .ARQOS(m_axi_p1_ARQOS),
    .ARREGION(m_axi_p1_ARREGION),
    .ARUSER(m_axi_p1_ARUSER),
    .RVALID(m_axi_p1_RVALID),
    .RREADY(m_axi_p1_RREADY),
    .RDATA(m_axi_p1_RDATA),
    .RLAST(m_axi_p1_RLAST),
    .RID(m_axi_p1_RID),
    .RUSER(m_axi_p1_RUSER),
    .RRESP(m_axi_p1_RRESP),
    .BVALID(m_axi_p1_BVALID),
    .BREADY(m_axi_p1_BREADY),
    .BRESP(m_axi_p1_BRESP),
    .BID(m_axi_p1_BID),
    .BUSER(m_axi_p1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(p1_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARLEN(32'd0),
    .I_RVALID(p1_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(p1_RDATA),
    .I_RFIFONUM(p1_RFIFONUM),
    .I_AWVALID(p1_AWVALID),
    .I_AWREADY(p1_AWREADY),
    .I_AWADDR(grp_pass_dataflow_fu_88_m_axi_p1_AWADDR),
    .I_AWLEN(grp_pass_dataflow_fu_88_m_axi_p1_AWLEN),
    .I_WVALID(p1_WVALID),
    .I_WREADY(p1_WREADY),
    .I_WDATA(grp_pass_dataflow_fu_88_m_axi_p1_WDATA),
    .I_WSTRB(grp_pass_dataflow_fu_88_m_axi_p1_WSTRB),
    .I_BVALID(p1_BVALID),
    .I_BREADY(p1_BREADY)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_pass_dataflow_fu_88_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_pass_dataflow_fu_88_ap_done <= 1'b0;
        end else if ((grp_pass_dataflow_fu_88_ap_done == 1'b1)) begin
            ap_sync_reg_grp_pass_dataflow_fu_88_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_pass_dataflow_fu_88_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_pass_dataflow_fu_88_ap_ready <= 1'b0;
        end else if ((grp_pass_dataflow_fu_88_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_pass_dataflow_fu_88_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pass_dataflow_fu_88_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) | ((ap_sync_grp_pass_dataflow_fu_88_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
            grp_pass_dataflow_fu_88_ap_start_reg <= 1'b1;
        end else if ((grp_pass_dataflow_fu_88_ap_ready == 1'b1)) begin
            grp_pass_dataflow_fu_88_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        input_r_read_reg_115 <= input_r;
        output_r_read_reg_110 <= output_r;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_on_subcall_done)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        grp_pass_dataflow_fu_88_ap_continue = 1'b1;
    end else begin
        grp_pass_dataflow_fu_88_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        p0_ARVALID = grp_pass_dataflow_fu_88_m_axi_p0_ARVALID;
    end else begin
        p0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        p0_RREADY = grp_pass_dataflow_fu_88_m_axi_p0_RREADY;
    end else begin
        p0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        p1_AWVALID = grp_pass_dataflow_fu_88_m_axi_p1_AWVALID;
    end else begin
        p1_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        p1_BREADY = grp_pass_dataflow_fu_88_m_axi_p1_BREADY;
    end else begin
        p1_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        p1_WVALID = grp_pass_dataflow_fu_88_m_axi_p1_WVALID;
    end else begin
        p1_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state3_on_subcall_done = ((ap_sync_grp_pass_dataflow_fu_88_ap_ready & ap_sync_grp_pass_dataflow_fu_88_ap_done) == 1'b0);
end

assign ap_sync_grp_pass_dataflow_fu_88_ap_done = (grp_pass_dataflow_fu_88_ap_done | ap_sync_reg_grp_pass_dataflow_fu_88_ap_done);

assign ap_sync_grp_pass_dataflow_fu_88_ap_ready = (grp_pass_dataflow_fu_88_ap_ready | ap_sync_reg_grp_pass_dataflow_fu_88_ap_ready);

assign grp_pass_dataflow_fu_88_ap_start = grp_pass_dataflow_fu_88_ap_start_reg;


reg find_df_deadlock = 0;
// synthesis translate_off
`include "pass_hls_deadlock_detector.vh"
// synthesis translate_on

endmodule //pass

