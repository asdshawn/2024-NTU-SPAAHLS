// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pass_exec (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        inStream2_dout,
        inStream2_num_data_valid,
        inStream2_fifo_cap,
        inStream2_empty_n,
        inStream2_read,
        outStream3_din,
        outStream3_num_data_valid,
        outStream3_fifo_cap,
        outStream3_full_n,
        outStream3_write,
        numInputs_dout,
        numInputs_num_data_valid,
        numInputs_fifo_cap,
        numInputs_empty_n,
        numInputs_read,
        processDelay_dout,
        processDelay_num_data_valid,
        processDelay_fifo_cap,
        processDelay_empty_n,
        processDelay_read,
        numInputs_c_din,
        numInputs_c_num_data_valid,
        numInputs_c_fifo_cap,
        numInputs_c_full_n,
        numInputs_c_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [511:0] inStream2_dout;
input  [1:0] inStream2_num_data_valid;
input  [1:0] inStream2_fifo_cap;
input   inStream2_empty_n;
output   inStream2_read;
output  [511:0] outStream3_din;
input  [1:0] outStream3_num_data_valid;
input  [1:0] outStream3_fifo_cap;
input   outStream3_full_n;
output   outStream3_write;
input  [31:0] numInputs_dout;
input  [1:0] numInputs_num_data_valid;
input  [1:0] numInputs_fifo_cap;
input   numInputs_empty_n;
output   numInputs_read;
input  [31:0] processDelay_dout;
input  [2:0] processDelay_num_data_valid;
input  [2:0] processDelay_fifo_cap;
input   processDelay_empty_n;
output   processDelay_read;
output  [31:0] numInputs_c_din;
input  [1:0] numInputs_c_num_data_valid;
input  [1:0] numInputs_c_fifo_cap;
input   numInputs_c_full_n;
output   numInputs_c_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inStream2_read;
reg outStream3_write;
reg numInputs_read;
reg processDelay_read;
reg numInputs_c_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    numInputs_blk_n;
reg    processDelay_blk_n;
reg    numInputs_c_blk_n;
reg   [31:0] numInputs_read_reg_93;
wire   [0:0] cmp29_fu_71_p2;
reg   [0:0] cmp29_reg_98;
wire   [31:0] add_ln23_fu_77_p2;
reg   [31:0] add_ln23_reg_103;
wire   [32:0] add_ln25_fu_86_p2;
reg   [32:0] add_ln25_reg_108;
wire    ap_CS_fsm_state2;
wire    grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_start;
wire    grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_done;
wire    grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_idle;
wire    grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_ready;
wire    grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_inStream2_read;
wire   [511:0] grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_outStream3_din;
wire    grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_outStream3_write;
reg    grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_start_reg;
wire    ap_CS_fsm_state3;
reg    ap_block_state1;
wire   [32:0] zext_ln23_fu_83_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_start_reg = 1'b0;
end

pass_exec_Pipeline_VITIS_LOOP_23_1 grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_start),
    .ap_done(grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_done),
    .ap_idle(grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_idle),
    .ap_ready(grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_ready),
    .inStream2_dout(inStream2_dout),
    .inStream2_num_data_valid(2'd0),
    .inStream2_fifo_cap(2'd0),
    .inStream2_empty_n(inStream2_empty_n),
    .inStream2_read(grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_inStream2_read),
    .outStream3_din(grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_outStream3_din),
    .outStream3_num_data_valid(2'd0),
    .outStream3_fifo_cap(2'd0),
    .outStream3_full_n(outStream3_full_n),
    .outStream3_write(grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_outStream3_write),
    .numInputs_load(numInputs_read_reg_93),
    .zext_ln25(add_ln25_reg_108),
    .cmp29(cmp29_reg_98)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_start_reg <= 1'b1;
        end else if ((grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_ready == 1'b1)) begin
            grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln23_reg_103 <= add_ln23_fu_77_p2;
        cmp29_reg_98 <= cmp29_fu_71_p2;
        numInputs_read_reg_93 <= numInputs_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln25_reg_108 <= add_ln25_fu_86_p2;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (numInputs_c_full_n == 1'b0) | (processDelay_empty_n == 1'b0) | (numInputs_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inStream2_read = grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_inStream2_read;
    end else begin
        inStream2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numInputs_blk_n = numInputs_empty_n;
    end else begin
        numInputs_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numInputs_c_blk_n = numInputs_c_full_n;
    end else begin
        numInputs_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (numInputs_c_full_n == 1'b0) | (processDelay_empty_n == 1'b0) | (numInputs_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numInputs_c_write = 1'b1;
    end else begin
        numInputs_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (numInputs_c_full_n == 1'b0) | (processDelay_empty_n == 1'b0) | (numInputs_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numInputs_read = 1'b1;
    end else begin
        numInputs_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        outStream3_write = grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_outStream3_write;
    end else begin
        outStream3_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        processDelay_blk_n = processDelay_empty_n;
    end else begin
        processDelay_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (numInputs_c_full_n == 1'b0) | (processDelay_empty_n == 1'b0) | (numInputs_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        processDelay_read = 1'b1;
    end else begin
        processDelay_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (numInputs_c_full_n == 1'b0) | (processDelay_empty_n == 1'b0) | (numInputs_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_77_p2 = ($signed(processDelay_dout) + $signed(32'd4294967295));

assign add_ln25_fu_86_p2 = (zext_ln23_fu_83_p1 + 33'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (numInputs_c_full_n == 1'b0) | (processDelay_empty_n == 1'b0) | (numInputs_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign cmp29_fu_71_p2 = ((processDelay_dout != 32'd0) ? 1'b1 : 1'b0);

assign grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_start = grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_ap_start_reg;

assign numInputs_c_din = numInputs_dout;

assign outStream3_din = grp_exec_Pipeline_VITIS_LOOP_23_1_fu_60_outStream3_din;

assign zext_ln23_fu_83_p1 = add_ln23_reg_103;

endmodule //pass_exec
