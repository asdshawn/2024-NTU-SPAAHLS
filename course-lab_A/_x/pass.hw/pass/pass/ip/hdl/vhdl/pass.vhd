-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pass is
generic (
    C_M_AXI_P0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_P0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_P0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P0_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_P0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_P1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_P1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P1_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_P1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_P1_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_P0_USER_VALUE : INTEGER := 0;
    C_M_AXI_P0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_P0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_P1_USER_VALUE : INTEGER := 0;
    C_M_AXI_P1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_P1_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_p0_AWVALID : OUT STD_LOGIC;
    m_axi_p0_AWREADY : IN STD_LOGIC;
    m_axi_p0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_P0_ADDR_WIDTH-1 downto 0);
    m_axi_p0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_P0_ID_WIDTH-1 downto 0);
    m_axi_p0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_p0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P0_AWUSER_WIDTH-1 downto 0);
    m_axi_p0_WVALID : OUT STD_LOGIC;
    m_axi_p0_WREADY : IN STD_LOGIC;
    m_axi_p0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_P0_DATA_WIDTH-1 downto 0);
    m_axi_p0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_P0_DATA_WIDTH/8-1 downto 0);
    m_axi_p0_WLAST : OUT STD_LOGIC;
    m_axi_p0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_P0_ID_WIDTH-1 downto 0);
    m_axi_p0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P0_WUSER_WIDTH-1 downto 0);
    m_axi_p0_ARVALID : OUT STD_LOGIC;
    m_axi_p0_ARREADY : IN STD_LOGIC;
    m_axi_p0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_P0_ADDR_WIDTH-1 downto 0);
    m_axi_p0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_P0_ID_WIDTH-1 downto 0);
    m_axi_p0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_p0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P0_ARUSER_WIDTH-1 downto 0);
    m_axi_p0_RVALID : IN STD_LOGIC;
    m_axi_p0_RREADY : OUT STD_LOGIC;
    m_axi_p0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_P0_DATA_WIDTH-1 downto 0);
    m_axi_p0_RLAST : IN STD_LOGIC;
    m_axi_p0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_P0_ID_WIDTH-1 downto 0);
    m_axi_p0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_P0_RUSER_WIDTH-1 downto 0);
    m_axi_p0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p0_BVALID : IN STD_LOGIC;
    m_axi_p0_BREADY : OUT STD_LOGIC;
    m_axi_p0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_P0_ID_WIDTH-1 downto 0);
    m_axi_p0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_P0_BUSER_WIDTH-1 downto 0);
    m_axi_p1_AWVALID : OUT STD_LOGIC;
    m_axi_p1_AWREADY : IN STD_LOGIC;
    m_axi_p1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_P1_ADDR_WIDTH-1 downto 0);
    m_axi_p1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_P1_ID_WIDTH-1 downto 0);
    m_axi_p1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_p1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P1_AWUSER_WIDTH-1 downto 0);
    m_axi_p1_WVALID : OUT STD_LOGIC;
    m_axi_p1_WREADY : IN STD_LOGIC;
    m_axi_p1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_P1_DATA_WIDTH-1 downto 0);
    m_axi_p1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_P1_DATA_WIDTH/8-1 downto 0);
    m_axi_p1_WLAST : OUT STD_LOGIC;
    m_axi_p1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_P1_ID_WIDTH-1 downto 0);
    m_axi_p1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P1_WUSER_WIDTH-1 downto 0);
    m_axi_p1_ARVALID : OUT STD_LOGIC;
    m_axi_p1_ARREADY : IN STD_LOGIC;
    m_axi_p1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_P1_ADDR_WIDTH-1 downto 0);
    m_axi_p1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_P1_ID_WIDTH-1 downto 0);
    m_axi_p1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_p1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_p1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_p1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_P1_ARUSER_WIDTH-1 downto 0);
    m_axi_p1_RVALID : IN STD_LOGIC;
    m_axi_p1_RREADY : OUT STD_LOGIC;
    m_axi_p1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_P1_DATA_WIDTH-1 downto 0);
    m_axi_p1_RLAST : IN STD_LOGIC;
    m_axi_p1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_P1_ID_WIDTH-1 downto 0);
    m_axi_p1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_P1_RUSER_WIDTH-1 downto 0);
    m_axi_p1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p1_BVALID : IN STD_LOGIC;
    m_axi_p1_BREADY : OUT STD_LOGIC;
    m_axi_p1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_p1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_P1_ID_WIDTH-1 downto 0);
    m_axi_p1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_P1_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of pass is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pass_pass,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.433090,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=14909,HLS_SYN_LUT=19939,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r : STD_LOGIC_VECTOR (63 downto 0);
    signal numInputs : STD_LOGIC_VECTOR (31 downto 0);
    signal processDelay : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_read_reg_110 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_r_read_reg_115 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_AWVALID : STD_LOGIC;
    signal grp_pass_dataflow_fu_88_m_axi_p0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_WVALID : STD_LOGIC;
    signal grp_pass_dataflow_fu_88_m_axi_p0_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_WLAST : STD_LOGIC;
    signal grp_pass_dataflow_fu_88_m_axi_p0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_ARVALID : STD_LOGIC;
    signal grp_pass_dataflow_fu_88_m_axi_p0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p0_RREADY : STD_LOGIC;
    signal grp_pass_dataflow_fu_88_m_axi_p0_BREADY : STD_LOGIC;
    signal grp_pass_dataflow_fu_88_m_axi_p1_AWVALID : STD_LOGIC;
    signal grp_pass_dataflow_fu_88_m_axi_p1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_WVALID : STD_LOGIC;
    signal grp_pass_dataflow_fu_88_m_axi_p1_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_WLAST : STD_LOGIC;
    signal grp_pass_dataflow_fu_88_m_axi_p1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_ARVALID : STD_LOGIC;
    signal grp_pass_dataflow_fu_88_m_axi_p1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_dataflow_fu_88_m_axi_p1_RREADY : STD_LOGIC;
    signal grp_pass_dataflow_fu_88_m_axi_p1_BREADY : STD_LOGIC;
    signal grp_pass_dataflow_fu_88_ap_start : STD_LOGIC;
    signal grp_pass_dataflow_fu_88_ap_done : STD_LOGIC;
    signal grp_pass_dataflow_fu_88_ap_ready : STD_LOGIC;
    signal grp_pass_dataflow_fu_88_ap_idle : STD_LOGIC;
    signal grp_pass_dataflow_fu_88_ap_continue : STD_LOGIC;
    signal p0_AWREADY : STD_LOGIC;
    signal p0_WREADY : STD_LOGIC;
    signal p0_ARVALID : STD_LOGIC;
    signal p0_ARREADY : STD_LOGIC;
    signal p0_RVALID : STD_LOGIC;
    signal p0_RREADY : STD_LOGIC;
    signal p0_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal p0_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal p0_BVALID : STD_LOGIC;
    signal p1_AWVALID : STD_LOGIC;
    signal p1_AWREADY : STD_LOGIC;
    signal p1_WVALID : STD_LOGIC;
    signal p1_WREADY : STD_LOGIC;
    signal p1_ARREADY : STD_LOGIC;
    signal p1_RVALID : STD_LOGIC;
    signal p1_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal p1_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal p1_BVALID : STD_LOGIC;
    signal p1_BREADY : STD_LOGIC;
    signal grp_pass_dataflow_fu_88_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_sync_grp_pass_dataflow_fu_88_ap_ready : STD_LOGIC;
    signal ap_sync_grp_pass_dataflow_fu_88_ap_done : STD_LOGIC;
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_pass_dataflow_fu_88_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_pass_dataflow_fu_88_ap_done : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pass_pass_dataflow IS
    port (
        m_axi_p0_AWVALID : OUT STD_LOGIC;
        m_axi_p0_AWREADY : IN STD_LOGIC;
        m_axi_p0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_p0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_WVALID : OUT STD_LOGIC;
        m_axi_p0_WREADY : IN STD_LOGIC;
        m_axi_p0_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_p0_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p0_WLAST : OUT STD_LOGIC;
        m_axi_p0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_ARVALID : OUT STD_LOGIC;
        m_axi_p0_ARREADY : IN STD_LOGIC;
        m_axi_p0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_p0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_RVALID : IN STD_LOGIC;
        m_axi_p0_RREADY : OUT STD_LOGIC;
        m_axi_p0_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_p0_RLAST : IN STD_LOGIC;
        m_axi_p0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_p0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p0_BVALID : IN STD_LOGIC;
        m_axi_p0_BREADY : OUT STD_LOGIC;
        m_axi_p0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p1_AWVALID : OUT STD_LOGIC;
        m_axi_p1_AWREADY : IN STD_LOGIC;
        m_axi_p1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_p1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_WVALID : OUT STD_LOGIC;
        m_axi_p1_WREADY : IN STD_LOGIC;
        m_axi_p1_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_p1_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p1_WLAST : OUT STD_LOGIC;
        m_axi_p1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_ARVALID : OUT STD_LOGIC;
        m_axi_p1_ARREADY : IN STD_LOGIC;
        m_axi_p1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_p1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_p1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_p1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_p1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_RVALID : IN STD_LOGIC;
        m_axi_p1_RREADY : OUT STD_LOGIC;
        m_axi_p1_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_p1_RLAST : IN STD_LOGIC;
        m_axi_p1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_p1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p1_BVALID : IN STD_LOGIC;
        m_axi_p1_BREADY : OUT STD_LOGIC;
        m_axi_p1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_p1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_p1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r : IN STD_LOGIC_VECTOR (63 downto 0);
        numInputs : IN STD_LOGIC_VECTOR (31 downto 0);
        processDelay : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        output_r_ap_vld : IN STD_LOGIC;
        processDelay_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        input_r_ap_vld : IN STD_LOGIC;
        numInputs_ap_vld : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component pass_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        numInputs : OUT STD_LOGIC_VECTOR (31 downto 0);
        processDelay : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component pass_p0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component pass_p1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    grp_pass_dataflow_fu_88 : component pass_pass_dataflow
    port map (
        m_axi_p0_AWVALID => grp_pass_dataflow_fu_88_m_axi_p0_AWVALID,
        m_axi_p0_AWREADY => ap_const_logic_0,
        m_axi_p0_AWADDR => grp_pass_dataflow_fu_88_m_axi_p0_AWADDR,
        m_axi_p0_AWID => grp_pass_dataflow_fu_88_m_axi_p0_AWID,
        m_axi_p0_AWLEN => grp_pass_dataflow_fu_88_m_axi_p0_AWLEN,
        m_axi_p0_AWSIZE => grp_pass_dataflow_fu_88_m_axi_p0_AWSIZE,
        m_axi_p0_AWBURST => grp_pass_dataflow_fu_88_m_axi_p0_AWBURST,
        m_axi_p0_AWLOCK => grp_pass_dataflow_fu_88_m_axi_p0_AWLOCK,
        m_axi_p0_AWCACHE => grp_pass_dataflow_fu_88_m_axi_p0_AWCACHE,
        m_axi_p0_AWPROT => grp_pass_dataflow_fu_88_m_axi_p0_AWPROT,
        m_axi_p0_AWQOS => grp_pass_dataflow_fu_88_m_axi_p0_AWQOS,
        m_axi_p0_AWREGION => grp_pass_dataflow_fu_88_m_axi_p0_AWREGION,
        m_axi_p0_AWUSER => grp_pass_dataflow_fu_88_m_axi_p0_AWUSER,
        m_axi_p0_WVALID => grp_pass_dataflow_fu_88_m_axi_p0_WVALID,
        m_axi_p0_WREADY => ap_const_logic_0,
        m_axi_p0_WDATA => grp_pass_dataflow_fu_88_m_axi_p0_WDATA,
        m_axi_p0_WSTRB => grp_pass_dataflow_fu_88_m_axi_p0_WSTRB,
        m_axi_p0_WLAST => grp_pass_dataflow_fu_88_m_axi_p0_WLAST,
        m_axi_p0_WID => grp_pass_dataflow_fu_88_m_axi_p0_WID,
        m_axi_p0_WUSER => grp_pass_dataflow_fu_88_m_axi_p0_WUSER,
        m_axi_p0_ARVALID => grp_pass_dataflow_fu_88_m_axi_p0_ARVALID,
        m_axi_p0_ARREADY => p0_ARREADY,
        m_axi_p0_ARADDR => grp_pass_dataflow_fu_88_m_axi_p0_ARADDR,
        m_axi_p0_ARID => grp_pass_dataflow_fu_88_m_axi_p0_ARID,
        m_axi_p0_ARLEN => grp_pass_dataflow_fu_88_m_axi_p0_ARLEN,
        m_axi_p0_ARSIZE => grp_pass_dataflow_fu_88_m_axi_p0_ARSIZE,
        m_axi_p0_ARBURST => grp_pass_dataflow_fu_88_m_axi_p0_ARBURST,
        m_axi_p0_ARLOCK => grp_pass_dataflow_fu_88_m_axi_p0_ARLOCK,
        m_axi_p0_ARCACHE => grp_pass_dataflow_fu_88_m_axi_p0_ARCACHE,
        m_axi_p0_ARPROT => grp_pass_dataflow_fu_88_m_axi_p0_ARPROT,
        m_axi_p0_ARQOS => grp_pass_dataflow_fu_88_m_axi_p0_ARQOS,
        m_axi_p0_ARREGION => grp_pass_dataflow_fu_88_m_axi_p0_ARREGION,
        m_axi_p0_ARUSER => grp_pass_dataflow_fu_88_m_axi_p0_ARUSER,
        m_axi_p0_RVALID => p0_RVALID,
        m_axi_p0_RREADY => grp_pass_dataflow_fu_88_m_axi_p0_RREADY,
        m_axi_p0_RDATA => p0_RDATA,
        m_axi_p0_RLAST => ap_const_logic_0,
        m_axi_p0_RID => ap_const_lv1_0,
        m_axi_p0_RFIFONUM => p0_RFIFONUM,
        m_axi_p0_RUSER => ap_const_lv1_0,
        m_axi_p0_RRESP => ap_const_lv2_0,
        m_axi_p0_BVALID => ap_const_logic_0,
        m_axi_p0_BREADY => grp_pass_dataflow_fu_88_m_axi_p0_BREADY,
        m_axi_p0_BRESP => ap_const_lv2_0,
        m_axi_p0_BID => ap_const_lv1_0,
        m_axi_p0_BUSER => ap_const_lv1_0,
        input_r => input_r_read_reg_115,
        m_axi_p1_AWVALID => grp_pass_dataflow_fu_88_m_axi_p1_AWVALID,
        m_axi_p1_AWREADY => p1_AWREADY,
        m_axi_p1_AWADDR => grp_pass_dataflow_fu_88_m_axi_p1_AWADDR,
        m_axi_p1_AWID => grp_pass_dataflow_fu_88_m_axi_p1_AWID,
        m_axi_p1_AWLEN => grp_pass_dataflow_fu_88_m_axi_p1_AWLEN,
        m_axi_p1_AWSIZE => grp_pass_dataflow_fu_88_m_axi_p1_AWSIZE,
        m_axi_p1_AWBURST => grp_pass_dataflow_fu_88_m_axi_p1_AWBURST,
        m_axi_p1_AWLOCK => grp_pass_dataflow_fu_88_m_axi_p1_AWLOCK,
        m_axi_p1_AWCACHE => grp_pass_dataflow_fu_88_m_axi_p1_AWCACHE,
        m_axi_p1_AWPROT => grp_pass_dataflow_fu_88_m_axi_p1_AWPROT,
        m_axi_p1_AWQOS => grp_pass_dataflow_fu_88_m_axi_p1_AWQOS,
        m_axi_p1_AWREGION => grp_pass_dataflow_fu_88_m_axi_p1_AWREGION,
        m_axi_p1_AWUSER => grp_pass_dataflow_fu_88_m_axi_p1_AWUSER,
        m_axi_p1_WVALID => grp_pass_dataflow_fu_88_m_axi_p1_WVALID,
        m_axi_p1_WREADY => p1_WREADY,
        m_axi_p1_WDATA => grp_pass_dataflow_fu_88_m_axi_p1_WDATA,
        m_axi_p1_WSTRB => grp_pass_dataflow_fu_88_m_axi_p1_WSTRB,
        m_axi_p1_WLAST => grp_pass_dataflow_fu_88_m_axi_p1_WLAST,
        m_axi_p1_WID => grp_pass_dataflow_fu_88_m_axi_p1_WID,
        m_axi_p1_WUSER => grp_pass_dataflow_fu_88_m_axi_p1_WUSER,
        m_axi_p1_ARVALID => grp_pass_dataflow_fu_88_m_axi_p1_ARVALID,
        m_axi_p1_ARREADY => ap_const_logic_0,
        m_axi_p1_ARADDR => grp_pass_dataflow_fu_88_m_axi_p1_ARADDR,
        m_axi_p1_ARID => grp_pass_dataflow_fu_88_m_axi_p1_ARID,
        m_axi_p1_ARLEN => grp_pass_dataflow_fu_88_m_axi_p1_ARLEN,
        m_axi_p1_ARSIZE => grp_pass_dataflow_fu_88_m_axi_p1_ARSIZE,
        m_axi_p1_ARBURST => grp_pass_dataflow_fu_88_m_axi_p1_ARBURST,
        m_axi_p1_ARLOCK => grp_pass_dataflow_fu_88_m_axi_p1_ARLOCK,
        m_axi_p1_ARCACHE => grp_pass_dataflow_fu_88_m_axi_p1_ARCACHE,
        m_axi_p1_ARPROT => grp_pass_dataflow_fu_88_m_axi_p1_ARPROT,
        m_axi_p1_ARQOS => grp_pass_dataflow_fu_88_m_axi_p1_ARQOS,
        m_axi_p1_ARREGION => grp_pass_dataflow_fu_88_m_axi_p1_ARREGION,
        m_axi_p1_ARUSER => grp_pass_dataflow_fu_88_m_axi_p1_ARUSER,
        m_axi_p1_RVALID => ap_const_logic_0,
        m_axi_p1_RREADY => grp_pass_dataflow_fu_88_m_axi_p1_RREADY,
        m_axi_p1_RDATA => ap_const_lv512_lc_1,
        m_axi_p1_RLAST => ap_const_logic_0,
        m_axi_p1_RID => ap_const_lv1_0,
        m_axi_p1_RFIFONUM => ap_const_lv9_0,
        m_axi_p1_RUSER => ap_const_lv1_0,
        m_axi_p1_RRESP => ap_const_lv2_0,
        m_axi_p1_BVALID => p1_BVALID,
        m_axi_p1_BREADY => grp_pass_dataflow_fu_88_m_axi_p1_BREADY,
        m_axi_p1_BRESP => ap_const_lv2_0,
        m_axi_p1_BID => ap_const_lv1_0,
        m_axi_p1_BUSER => ap_const_lv1_0,
        output_r => output_r_read_reg_110,
        numInputs => numInputs,
        processDelay => processDelay,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        output_r_ap_vld => ap_const_logic_1,
        processDelay_ap_vld => ap_const_logic_1,
        ap_start => grp_pass_dataflow_fu_88_ap_start,
        input_r_ap_vld => ap_const_logic_1,
        numInputs_ap_vld => ap_const_logic_1,
        ap_done => grp_pass_dataflow_fu_88_ap_done,
        ap_ready => grp_pass_dataflow_fu_88_ap_ready,
        ap_idle => grp_pass_dataflow_fu_88_ap_idle,
        ap_continue => grp_pass_dataflow_fu_88_ap_continue);

    control_s_axi_U : component pass_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_r => input_r,
        output_r => output_r,
        numInputs => numInputs,
        processDelay => processDelay,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    p0_m_axi_U : component pass_p0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_P0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_P0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_P0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_P0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_P0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_P0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_P0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_P0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_P0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_P0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_P0_CACHE_VALUE,
        USER_DW => 512,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_p0_AWVALID,
        AWREADY => m_axi_p0_AWREADY,
        AWADDR => m_axi_p0_AWADDR,
        AWID => m_axi_p0_AWID,
        AWLEN => m_axi_p0_AWLEN,
        AWSIZE => m_axi_p0_AWSIZE,
        AWBURST => m_axi_p0_AWBURST,
        AWLOCK => m_axi_p0_AWLOCK,
        AWCACHE => m_axi_p0_AWCACHE,
        AWPROT => m_axi_p0_AWPROT,
        AWQOS => m_axi_p0_AWQOS,
        AWREGION => m_axi_p0_AWREGION,
        AWUSER => m_axi_p0_AWUSER,
        WVALID => m_axi_p0_WVALID,
        WREADY => m_axi_p0_WREADY,
        WDATA => m_axi_p0_WDATA,
        WSTRB => m_axi_p0_WSTRB,
        WLAST => m_axi_p0_WLAST,
        WID => m_axi_p0_WID,
        WUSER => m_axi_p0_WUSER,
        ARVALID => m_axi_p0_ARVALID,
        ARREADY => m_axi_p0_ARREADY,
        ARADDR => m_axi_p0_ARADDR,
        ARID => m_axi_p0_ARID,
        ARLEN => m_axi_p0_ARLEN,
        ARSIZE => m_axi_p0_ARSIZE,
        ARBURST => m_axi_p0_ARBURST,
        ARLOCK => m_axi_p0_ARLOCK,
        ARCACHE => m_axi_p0_ARCACHE,
        ARPROT => m_axi_p0_ARPROT,
        ARQOS => m_axi_p0_ARQOS,
        ARREGION => m_axi_p0_ARREGION,
        ARUSER => m_axi_p0_ARUSER,
        RVALID => m_axi_p0_RVALID,
        RREADY => m_axi_p0_RREADY,
        RDATA => m_axi_p0_RDATA,
        RLAST => m_axi_p0_RLAST,
        RID => m_axi_p0_RID,
        RUSER => m_axi_p0_RUSER,
        RRESP => m_axi_p0_RRESP,
        BVALID => m_axi_p0_BVALID,
        BREADY => m_axi_p0_BREADY,
        BRESP => m_axi_p0_BRESP,
        BID => m_axi_p0_BID,
        BUSER => m_axi_p0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => p0_ARVALID,
        I_ARREADY => p0_ARREADY,
        I_ARADDR => grp_pass_dataflow_fu_88_m_axi_p0_ARADDR,
        I_ARLEN => grp_pass_dataflow_fu_88_m_axi_p0_ARLEN,
        I_RVALID => p0_RVALID,
        I_RREADY => p0_RREADY,
        I_RDATA => p0_RDATA,
        I_RFIFONUM => p0_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => p0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => p0_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => p0_BVALID,
        I_BREADY => ap_const_logic_0);

    p1_m_axi_U : component pass_p1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_P1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_P1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_P1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_P1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_P1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_P1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_P1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_P1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_P1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_P1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_P1_CACHE_VALUE,
        USER_DW => 512,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_p1_AWVALID,
        AWREADY => m_axi_p1_AWREADY,
        AWADDR => m_axi_p1_AWADDR,
        AWID => m_axi_p1_AWID,
        AWLEN => m_axi_p1_AWLEN,
        AWSIZE => m_axi_p1_AWSIZE,
        AWBURST => m_axi_p1_AWBURST,
        AWLOCK => m_axi_p1_AWLOCK,
        AWCACHE => m_axi_p1_AWCACHE,
        AWPROT => m_axi_p1_AWPROT,
        AWQOS => m_axi_p1_AWQOS,
        AWREGION => m_axi_p1_AWREGION,
        AWUSER => m_axi_p1_AWUSER,
        WVALID => m_axi_p1_WVALID,
        WREADY => m_axi_p1_WREADY,
        WDATA => m_axi_p1_WDATA,
        WSTRB => m_axi_p1_WSTRB,
        WLAST => m_axi_p1_WLAST,
        WID => m_axi_p1_WID,
        WUSER => m_axi_p1_WUSER,
        ARVALID => m_axi_p1_ARVALID,
        ARREADY => m_axi_p1_ARREADY,
        ARADDR => m_axi_p1_ARADDR,
        ARID => m_axi_p1_ARID,
        ARLEN => m_axi_p1_ARLEN,
        ARSIZE => m_axi_p1_ARSIZE,
        ARBURST => m_axi_p1_ARBURST,
        ARLOCK => m_axi_p1_ARLOCK,
        ARCACHE => m_axi_p1_ARCACHE,
        ARPROT => m_axi_p1_ARPROT,
        ARQOS => m_axi_p1_ARQOS,
        ARREGION => m_axi_p1_ARREGION,
        ARUSER => m_axi_p1_ARUSER,
        RVALID => m_axi_p1_RVALID,
        RREADY => m_axi_p1_RREADY,
        RDATA => m_axi_p1_RDATA,
        RLAST => m_axi_p1_RLAST,
        RID => m_axi_p1_RID,
        RUSER => m_axi_p1_RUSER,
        RRESP => m_axi_p1_RRESP,
        BVALID => m_axi_p1_BVALID,
        BREADY => m_axi_p1_BREADY,
        BRESP => m_axi_p1_BRESP,
        BID => m_axi_p1_BID,
        BUSER => m_axi_p1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => p1_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => p1_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => p1_RDATA,
        I_RFIFONUM => p1_RFIFONUM,
        I_AWVALID => p1_AWVALID,
        I_AWREADY => p1_AWREADY,
        I_AWADDR => grp_pass_dataflow_fu_88_m_axi_p1_AWADDR,
        I_AWLEN => grp_pass_dataflow_fu_88_m_axi_p1_AWLEN,
        I_WVALID => p1_WVALID,
        I_WREADY => p1_WREADY,
        I_WDATA => grp_pass_dataflow_fu_88_m_axi_p1_WDATA,
        I_WSTRB => grp_pass_dataflow_fu_88_m_axi_p1_WSTRB,
        I_BVALID => p1_BVALID,
        I_BREADY => p1_BREADY);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_pass_dataflow_fu_88_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_pass_dataflow_fu_88_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_pass_dataflow_fu_88_ap_done <= ap_const_logic_0;
                elsif ((grp_pass_dataflow_fu_88_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_pass_dataflow_fu_88_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_pass_dataflow_fu_88_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_pass_dataflow_fu_88_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_pass_dataflow_fu_88_ap_ready <= ap_const_logic_0;
                elsif ((grp_pass_dataflow_fu_88_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_pass_dataflow_fu_88_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_pass_dataflow_fu_88_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pass_dataflow_fu_88_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_sync_grp_pass_dataflow_fu_88_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    grp_pass_dataflow_fu_88_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pass_dataflow_fu_88_ap_ready = ap_const_logic_1)) then 
                    grp_pass_dataflow_fu_88_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                input_r_read_reg_115 <= input_r;
                output_r_read_reg_110 <= output_r;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_on_subcall_done)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state3_on_subcall_done_assign_proc : process(ap_sync_grp_pass_dataflow_fu_88_ap_ready, ap_sync_grp_pass_dataflow_fu_88_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((ap_sync_grp_pass_dataflow_fu_88_ap_ready and ap_sync_grp_pass_dataflow_fu_88_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_pass_dataflow_fu_88_ap_done <= (grp_pass_dataflow_fu_88_ap_done or ap_sync_reg_grp_pass_dataflow_fu_88_ap_done);
    ap_sync_grp_pass_dataflow_fu_88_ap_ready <= (grp_pass_dataflow_fu_88_ap_ready or ap_sync_reg_grp_pass_dataflow_fu_88_ap_ready);

    grp_pass_dataflow_fu_88_ap_continue_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_pass_dataflow_fu_88_ap_continue <= ap_const_logic_1;
        else 
            grp_pass_dataflow_fu_88_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_pass_dataflow_fu_88_ap_start <= grp_pass_dataflow_fu_88_ap_start_reg;

    p0_ARVALID_assign_proc : process(grp_pass_dataflow_fu_88_m_axi_p0_ARVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p0_ARVALID <= grp_pass_dataflow_fu_88_m_axi_p0_ARVALID;
        else 
            p0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    p0_RREADY_assign_proc : process(grp_pass_dataflow_fu_88_m_axi_p0_RREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p0_RREADY <= grp_pass_dataflow_fu_88_m_axi_p0_RREADY;
        else 
            p0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    p1_AWVALID_assign_proc : process(grp_pass_dataflow_fu_88_m_axi_p1_AWVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p1_AWVALID <= grp_pass_dataflow_fu_88_m_axi_p1_AWVALID;
        else 
            p1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    p1_BREADY_assign_proc : process(grp_pass_dataflow_fu_88_m_axi_p1_BREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p1_BREADY <= grp_pass_dataflow_fu_88_m_axi_p1_BREADY;
        else 
            p1_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    p1_WVALID_assign_proc : process(grp_pass_dataflow_fu_88_m_axi_p1_WVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p1_WVALID <= grp_pass_dataflow_fu_88_m_axi_p1_WVALID;
        else 
            p1_WVALID <= ap_const_logic_0;
        end if; 
    end process;

end behav;
